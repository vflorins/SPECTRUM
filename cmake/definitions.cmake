# File spectrum.cmake Created by Lucius Schoenbaum April 28, 2025
# CMake build scripts for SPECTRUM codes - definitions file

set(PROJECT_LANGUAGES CXX)
set(CMAKE_C_STANDARD 99)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CUDA_STANDARD 20)
if(USE_CUDA)
    set(PROJECT_LANGUAGES ${PROJECT_LANGUAGES} CUDA)
endif()


function(dump_cmake_variables)
    get_cmake_property(_variableNames VARIABLES)
    list (SORT _variableNames)
    foreach (_variableName ${_variableNames})
        if (ARGV0)
            unset(MATCHED)
            string(REGEX MATCH ${ARGV0} MATCHED ${_variableName})
            if (NOT MATCHED)
                continue()
            endif()
        endif()
        message(STATUS "${_variableName}=${${_variableName}}")
    endforeach()
endfunction()


function(link_dependency DEPNAME)
    if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
        if(${DEPNAME} STREQUAL "mpi")
            message("handling mpi...")
            pkg_check_modules(OMPI REQUIRED IMPORTED_TARGET ompi)
            target_include_directories(${PROJECT_NAME} PRIVATE ${OMPI_INCLUDE_DIRS})
            target_link_libraries(${PROJECT_NAME} PRIVATE PkgConfig::OMPI)
            #        elseif(${DEPNAME} STREQUAL "siloh5")
            #            message("handling siloh5...")
        elseif(${DEPNAME} STREQUAL "eigen")
            message("handling eigen...")
            execute_process(COMMAND pkg-config --variable=prefix eigen3 OUTPUT_VARIABLE DEPHOME OUTPUT_STRIP_TRAILING_WHITESPACE)
            target_include_directories(${PROJECT_NAME} PRIVATE "${DEPHOME}/include")
        else()
            message("handling ${DEPNAME}...")
            pkg_check_modules(${DEPNAME} REQUIRED IMPORTED_TARGET ${DEPNAME})
            target_include_directories(${PROJECT_NAME} PRIVATE ${${DEPNAME}_INCLUDE_DIRS})
            target_link_libraries(${PROJECT_NAME} PRIVATE PkgConfig::${DEPNAME})
        endif()
    elseif(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
        if(${DEPNAME} STREQUAL "mpi")
            execute_process(COMMAND pkg-config --variable=prefix ompi OUTPUT_VARIABLE DEPHOME OUTPUT_STRIP_TRAILING_WHITESPACE)
            message("handling mpi (exceptional case)...")
            target_include_directories(${PROJECT_NAME} SYSTEM PRIVATE "${DEPHOME}/include")
            target_link_libraries(${PROJECT_NAME} "${DEPHOME}/lib/libmpi.dylib")
        elseif(${DEPNAME} STREQUAL "siloh5")
            message("handling siloh5 (exceptional case)...")
            execute_process(COMMAND pkg-config --variable=prefix siloh5 OUTPUT_VARIABLE DEPHOME OUTPUT_STRIP_TRAILING_WHITESPACE)
            target_include_directories(${PROJECT_NAME} PRIVATE "${DEPHOME}/include/silo/include")
            target_link_libraries(${PROJECT_NAME} "${DEPHOME}/lib/libsiloh5.dylib")
            target_link_directories(${PROJECT_NAME} PUBLIC "${DEPHOME}")
        elseif(${DEPNAME} STREQUAL "eigen")
            message("handling eigen (exceptional case)...")
            execute_process(COMMAND pkg-config --variable=prefix eigen OUTPUT_VARIABLE DEPHOME OUTPUT_STRIP_TRAILING_WHITESPACE)
            target_include_directories(${PROJECT_NAME} PRIVATE "${DEPHOME}/include")
        else()
            message("handling ${DEPNAME} (normal case)...")
            execute_process(COMMAND pkg-config --variable=prefix ${DEPNAME} OUTPUT_VARIABLE DEPHOME OUTPUT_STRIP_TRAILING_WHITESPACE)
            target_include_directories(${PROJECT_NAME} PRIVATE "${DEPHOME}/include")
            target_link_libraries(${PROJECT_NAME} "${DEPHOME}/lib/lib${DEPNAME}.dylib")
        endif()
        message("dependency ${DEPNAME}: home ${DEPHOME}")
    else()
        message("Cannot link ${DEPNAME}: unrecognized system name ${CMAKE_SYSTEM_NAME}")
    endif()
endfunction()


