/*!
\file mhdtuple.hh
\author Vladimir Florinski
\author Lucius Schoenbaum
\author Juan G Alonso Guzman

This file is part of the SPECTRUM suite of scientific numerical simulation codes. SPECTRUM stands for Space Plasma and Energetic Charged particle TRansport on Unstructured Meshes. The code simulates plasma or neutral particle flows using MHD equations on a grid, transport of cosmic rays using stochastic or grid based methods. The "unstructured" part refers to the use of a geodesic mesh providing a uniform coverage of the surface of a sphere.
*/

/*
This file contains a block of code generated by generate.py.
Do not edit the contents of this file within the block bounded by
the pragmas "BEGIN(fields/generate)" and "END(fields/generate)",
instead edit the file `generated/generate.py`.
Elsewhere, this file can be edited normally.
*/

#ifndef SPECTRUM_MHDTUPLE_HH
#define SPECTRUM_MHDTUPLE_HH

#include <iostream>
#include <any>
#include <stdexcept>
#include "../generated/field_groups.hh"

namespace Spectrum {

/*!
\brief Multi-purpose class storing physical data defined at a spatial location.
Used in the data interface with the (pseudo-)particle tracer, and to house
data distributed on the grid.
\author Lucius Schoenbaum
\author Vladimir Florinski
\note Recursion in protected methods takes place only once, at compile time.
*/
template <typename T, typename ... Ts>
struct Fields: public Fields<Ts...> {

protected:

   T data;

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] index index into tuple
\param[in] f lvalue reference function, i.e., lambda defined at time of call
\param[in] others variadic lvalue reference of other tuples having the same tuple type
\note Public access via visit()
*/
   template <typename Function>
   void visit_unpacked(std::size_t index, Function&& f, auto&&... others) {
      if (index == 0) {
         f(data, others.data...);
      } else {
         Fields<Ts...>::visit_unpacked(index - 1, std::forward<Function>(f), static_cast<Fields<Ts...>>(others)...);
      }
   }

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] f lvalue reference function, i.e., lambda defined at time of call
\param[in] others variadic lvalue reference of other tuples having the same tuple type
\note Public access via foreach()
*/
   template <typename Function>
   void foreach_unpacked(Function&& f, auto&&... others) {
      f(data, others.data...);
      Fields<Ts...>::foreach_unpacked(std::forward<Function>(f), static_cast<Fields<Ts...>>(others)...);
   }


/*!
\brief Assignment if types match, otherwise do not compile.
\author Lucius Schoenbaum
\date 06/25/2025
\param[in] x1, x2 possibly mismatched value/variable instances
*/
   template <typename T1, typename T2>
   void assign(T1& x1, const T2& x2) {
      if constexpr (std::is_same<T1, T2>::value) {
         x1 = x2;
      }
   }

public:

   Fields(void) = default;

   explicit Fields(T in, Ts... rest):
      Fields<Ts...>(rest...),
       data(in)
   {};


/*!
\author Lucius Schoenbaum
\author Vladimir Florinski
\date 07/02/2024
\param[in] other Structure to copy from
\return Reference to the object
*/
   Fields& operator=(const Fields& other) {
      Fields<Ts...>::operator=(other);
      data = other.data;
      return *this;
   };
  
/*!
\author Lucius Schoenbaum
\date 05/28/2025
\return size of tuple
*/
   size_t size() const {
      return sizeof...(Ts)+1;
   }
  
/*!
\author Lucius Schoenbaum
\date 05/28/2025
\return constant reference to top element of tuple
*/
   const T& top() const {
      return data;
   }

/*!
\author Lucius Schoenbaum
\date 05/28/2025
\return reference to top element of tuple
*/
   T& top() {
      return data;
   }

/*!
\author Lucius Schoenbaum
\date 05/28/2025
\param[in] index index into tuple
\return Reference to member of tuple evaluated at runtime
\note Type of return value must be known (and any_cast to) by caller. 
If this is not the case, use get<index>(fields).
*/
   std::any operator[](std::size_t index) const {
      if (index == 0)
         return data;
      else
         return Fields<Ts...>::operator[](index-1);
   }



/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] index index into tuple
\param[in] f lvalue reference function, i.e., lambda defined at time of call
\param[in] others variadic lvalue reference of other tuples having the same tuple type
*/
   template <typename Function, typename Others>
   void visit(std::size_t index, Function&& f, Others&& others) {
      std::apply(
            [&](auto&&... others) {
               visit_unpacked(index, std::forward<Function>(f), std::forward<decltype(others)>(others)...);
            },
            std::forward<Others>(others)
      );
   }

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] f lvalue reference function, i.e., lambda defined at time of call
\param[in] others variadic lvalue reference of other tuples having the same tuple type
*/
   template <typename Function, typename Others>
   void foreach(Function&& f, Others&& others) {
      std::apply(
            [&](auto&&... others) {
               foreach_unpacked(std::forward<Function>(f), std::forward<decltype(others)>(others)...);
            },
            std::forward<Others>(others)
      );
   }

/*!
\author Lucius Schoenbaum
\date 05/28/2025
\param[in] f Function to evaluate on each tuple member
\return Reference to the object
*/
   template <typename Function>
   void foreach(Function&& f) {
      f(data);
      Fields<Ts...>::foreach(f);
   }

/*!
\brief Store a quantity by type
\author Lucius Schoenbaum
\date 06/25/2025
\param[in] x Quantity to store
Note: This method is functionally invalid if the tuple
contains multiple members with the same data type.
This should not occur in fluid or MHD applications.
 */
   template <typename T_store>
   void store(T_store x) {
      assign(data, x);
      Fields<Ts...>::store(x);
   }


   // BEGIN(fields/generate, class)

/*!
\brief Get Den (Fluid density field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Den_t& Den(void) {
      if constexpr (std::is_same<T, Den_t>::value)
         return data;
      else
         return Fields<Ts...>::Den();
   };

/*!
\brief Get Den (Fluid density field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Den_t& Den(void) const {
      if constexpr (std::is_same<T, Den_t>::value)
         return data;
      else
         return Fields<Ts...>::Den();
   };


/*!
\brief Whether Den (Fluid density field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool Den_found(void) {
      if constexpr (std::is_same<T, Den_t>::value)
         return true;
      else
         return Fields<Ts...>::Den_found();
   };
   

/*!
\brief Get Prs (Fluid pressure field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Prs_t& Prs(void) {
      if constexpr (std::is_same<T, Prs_t>::value)
         return data;
      else
         return Fields<Ts...>::Prs();
   };

/*!
\brief Get Prs (Fluid pressure field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Prs_t& Prs(void) const {
      if constexpr (std::is_same<T, Prs_t>::value)
         return data;
      else
         return Fields<Ts...>::Prs();
   };


/*!
\brief Whether Prs (Fluid pressure field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool Prs_found(void) {
      if constexpr (std::is_same<T, Prs_t>::value)
         return true;
      else
         return Fields<Ts...>::Prs_found();
   };
   

/*!
\brief Get Enr (Fluid energy field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Enr_t& Enr(void) {
      if constexpr (std::is_same<T, Enr_t>::value)
         return data;
      else
         return Fields<Ts...>::Enr();
   };

/*!
\brief Get Enr (Fluid energy field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Enr_t& Enr(void) const {
      if constexpr (std::is_same<T, Enr_t>::value)
         return data;
      else
         return Fields<Ts...>::Enr();
   };


/*!
\brief Whether Enr (Fluid energy field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool Enr_found(void) {
      if constexpr (std::is_same<T, Enr_t>::value)
         return true;
      else
         return Fields<Ts...>::Enr_found();
   };
   

/*!
\brief Get Vel (Fluid velocity field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Vel_t& Vel(void) {
      if constexpr (std::is_same<T, Vel_t>::value)
         return data;
      else
         return Fields<Ts...>::Vel();
   };

/*!
\brief Get Vel (Fluid velocity field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Vel_t& Vel(void) const {
      if constexpr (std::is_same<T, Vel_t>::value)
         return data;
      else
         return Fields<Ts...>::Vel();
   };


/*!
\brief Whether Vel (Fluid velocity field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool Vel_found(void) {
      if constexpr (std::is_same<T, Vel_t>::value)
         return true;
      else
         return Fields<Ts...>::Vel_found();
   };
   

/*!
\brief Get Mom (Fluid momentum field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Mom_t& Mom(void) {
      if constexpr (std::is_same<T, Mom_t>::value)
         return data;
      else
         return Fields<Ts...>::Mom();
   };

/*!
\brief Get Mom (Fluid momentum field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Mom_t& Mom(void) const {
      if constexpr (std::is_same<T, Mom_t>::value)
         return data;
      else
         return Fields<Ts...>::Mom();
   };


/*!
\brief Whether Mom (Fluid momentum field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool Mom_found(void) {
      if constexpr (std::is_same<T, Mom_t>::value)
         return true;
      else
         return Fields<Ts...>::Mom_found();
   };
   

/*!
\brief Get FlxDen (Fluid density flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxDen_t& FlxDen(void) {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxDen();
   };

/*!
\brief Get FlxDen (Fluid density flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxDen_t& FlxDen(void) const {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxDen();
   };


/*!
\brief Whether FlxDen (Fluid density flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool FlxDen_found(void) {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return true;
      else
         return Fields<Ts...>::FlxDen_found();
   };
   

/*!
\brief Get FlxMom (Fluid momentum flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxMom_t& FlxMom(void) {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxMom();
   };

/*!
\brief Get FlxMom (Fluid momentum flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxMom_t& FlxMom(void) const {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxMom();
   };


/*!
\brief Whether FlxMom (Fluid momentum flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool FlxMom_found(void) {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return true;
      else
         return Fields<Ts...>::FlxMom_found();
   };
   

/*!
\brief Get FlxEnr (Fluid energy flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxEnr_t& FlxEnr(void) {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxEnr();
   };

/*!
\brief Get FlxEnr (Fluid energy flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxEnr_t& FlxEnr(void) const {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxEnr();
   };


/*!
\brief Whether FlxEnr (Fluid energy flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool FlxEnr_found(void) {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return true;
      else
         return Fields<Ts...>::FlxEnr_found();
   };
   

/*!
\brief Get Mag (Magnetic field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Mag_t& Mag(void) {
      if constexpr (std::is_same<T, Mag_t>::value)
         return data;
      else
         return Fields<Ts...>::Mag();
   };

/*!
\brief Get Mag (Magnetic field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Mag_t& Mag(void) const {
      if constexpr (std::is_same<T, Mag_t>::value)
         return data;
      else
         return Fields<Ts...>::Mag();
   };


/*!
\brief Whether Mag (Magnetic field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool Mag_found(void) {
      if constexpr (std::is_same<T, Mag_t>::value)
         return true;
      else
         return Fields<Ts...>::Mag_found();
   };
   

/*!
\brief Get FlxMag (Magnetic field flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxMag_t& FlxMag(void) {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxMag();
   };

/*!
\brief Get FlxMag (Magnetic field flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxMag_t& FlxMag(void) const {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxMag();
   };


/*!
\brief Whether FlxMag (Magnetic field flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool FlxMag_found(void) {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return true;
      else
         return Fields<Ts...>::FlxMag_found();
   };
   

/*!
\brief Get Glm (Lagrange multiplier field of GLM MHD) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Glm_t& Glm(void) {
      if constexpr (std::is_same<T, Glm_t>::value)
         return data;
      else
         return Fields<Ts...>::Glm();
   };

/*!
\brief Get Glm (Lagrange multiplier field of GLM MHD) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Glm_t& Glm(void) const {
      if constexpr (std::is_same<T, Glm_t>::value)
         return data;
      else
         return Fields<Ts...>::Glm();
   };


/*!
\brief Whether Glm (Lagrange multiplier field of GLM MHD) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool Glm_found(void) {
      if constexpr (std::is_same<T, Glm_t>::value)
         return true;
      else
         return Fields<Ts...>::Glm_found();
   };
   

/*!
\brief Get FlxGlm (Lagrange mutlipler flux function of GLM MHD) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxGlm_t& FlxGlm(void) {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxGlm();
   };

/*!
\brief Get FlxGlm (Lagrange mutlipler flux function of GLM MHD) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxGlm_t& FlxGlm(void) const {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return data;
      else
         return Fields<Ts...>::FlxGlm();
   };


/*!
\brief Whether FlxGlm (Lagrange mutlipler flux function of GLM MHD) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool FlxGlm_found(void) {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return true;
      else
         return Fields<Ts...>::FlxGlm_found();
   };
   

/*!
\brief Get Elc (Electric field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Elc_t& Elc(void) {
      if constexpr (std::is_same<T, Elc_t>::value)
         return data;
      else
         return Fields<Ts...>::Elc();
   };

/*!
\brief Get Elc (Electric field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Elc_t& Elc(void) const {
      if constexpr (std::is_same<T, Elc_t>::value)
         return data;
      else
         return Fields<Ts...>::Elc();
   };


/*!
\brief Whether Elc (Electric field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool Elc_found(void) {
      if constexpr (std::is_same<T, Elc_t>::value)
         return true;
      else
         return Fields<Ts...>::Elc_found();
   };
   

/*!
\brief Get AbsMag (Magnetic field magnitude) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   AbsMag_t& AbsMag(void) {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return data;
      else
         return Fields<Ts...>::AbsMag();
   };

/*!
\brief Get AbsMag (Magnetic field magnitude) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const AbsMag_t& AbsMag(void) const {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return data;
      else
         return Fields<Ts...>::AbsMag();
   };


/*!
\brief Whether AbsMag (Magnetic field magnitude) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool AbsMag_found(void) {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return true;
      else
         return Fields<Ts...>::AbsMag_found();
   };
   

/*!
\brief Get HatMag (Magnetic field direction) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   HatMag_t& HatMag(void) {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return data;
      else
         return Fields<Ts...>::HatMag();
   };

/*!
\brief Get HatMag (Magnetic field direction) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const HatMag_t& HatMag(void) const {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return data;
      else
         return Fields<Ts...>::HatMag();
   };


/*!
\brief Whether HatMag (Magnetic field direction) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool HatMag_found(void) {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return true;
      else
         return Fields<Ts...>::HatMag_found();
   };
   

/*!
\brief Get DelVel (Gradient of velocity field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelVel_t& DelVel(void) {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return data;
      else
         return Fields<Ts...>::DelVel();
   };

/*!
\brief Get DelVel (Gradient of velocity field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelVel_t& DelVel(void) const {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return data;
      else
         return Fields<Ts...>::DelVel();
   };


/*!
\brief Whether DelVel (Gradient of velocity field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DelVel_found(void) {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return true;
      else
         return Fields<Ts...>::DelVel_found();
   };
   

/*!
\brief Get DelElc (Gradient of electric field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelElc_t& DelElc(void) {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return data;
      else
         return Fields<Ts...>::DelElc();
   };

/*!
\brief Get DelElc (Gradient of electric field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelElc_t& DelElc(void) const {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return data;
      else
         return Fields<Ts...>::DelElc();
   };


/*!
\brief Whether DelElc (Gradient of electric field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DelElc_found(void) {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return true;
      else
         return Fields<Ts...>::DelElc_found();
   };
   

/*!
\brief Get DelMag (Gradient of magnetic field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelMag_t& DelMag(void) {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DelMag();
   };

/*!
\brief Get DelMag (Gradient of magnetic field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelMag_t& DelMag(void) const {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DelMag();
   };


/*!
\brief Whether DelMag (Gradient of magnetic field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DelMag_found(void) {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return true;
      else
         return Fields<Ts...>::DelMag_found();
   };
   

/*!
\brief Get DelAbsMag (Gradient of magnetic field magnitude) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelAbsMag_t& DelAbsMag(void) {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DelAbsMag();
   };

/*!
\brief Get DelAbsMag (Gradient of magnetic field magnitude) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelAbsMag_t& DelAbsMag(void) const {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DelAbsMag();
   };


/*!
\brief Whether DelAbsMag (Gradient of magnetic field magnitude) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DelAbsMag_found(void) {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return true;
      else
         return Fields<Ts...>::DelAbsMag_found();
   };
   

/*!
\brief Get DelHatMag (Gradient of magnetic field direction ) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelHatMag_t& DelHatMag(void) {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DelHatMag();
   };

/*!
\brief Get DelHatMag (Gradient of magnetic field direction ) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelHatMag_t& DelHatMag(void) const {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DelHatMag();
   };


/*!
\brief Whether DelHatMag (Gradient of magnetic field direction ) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DelHatMag_found(void) {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return true;
      else
         return Fields<Ts...>::DelHatMag_found();
   };
   

/*!
\brief Get DerVel (Time derivative of velocity field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DerVel_t& DerVel(void) {
      if constexpr (std::is_same<T, DerVel_t>::value)
         return data;
      else
         return Fields<Ts...>::DerVel();
   };

/*!
\brief Get DerVel (Time derivative of velocity field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DerVel_t& DerVel(void) const {
      if constexpr (std::is_same<T, DerVel_t>::value)
         return data;
      else
         return Fields<Ts...>::DerVel();
   };


/*!
\brief Whether DerVel (Time derivative of velocity field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DerVel_found(void) {
      if constexpr (std::is_same<T, DerVel_t>::value)
         return true;
      else
         return Fields<Ts...>::DerVel_found();
   };
   

/*!
\brief Get DerElc (Time derivative of electric field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DerElc_t& DerElc(void) {
      if constexpr (std::is_same<T, DerElc_t>::value)
         return data;
      else
         return Fields<Ts...>::DerElc();
   };

/*!
\brief Get DerElc (Time derivative of electric field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DerElc_t& DerElc(void) const {
      if constexpr (std::is_same<T, DerElc_t>::value)
         return data;
      else
         return Fields<Ts...>::DerElc();
   };


/*!
\brief Whether DerElc (Time derivative of electric field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DerElc_found(void) {
      if constexpr (std::is_same<T, DerElc_t>::value)
         return true;
      else
         return Fields<Ts...>::DerElc_found();
   };
   

/*!
\brief Get DerMag (Time derivative of magnetic field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DerMag_t& DerMag(void) {
      if constexpr (std::is_same<T, DerMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DerMag();
   };

/*!
\brief Get DerMag (Time derivative of magnetic field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DerMag_t& DerMag(void) const {
      if constexpr (std::is_same<T, DerMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DerMag();
   };


/*!
\brief Whether DerMag (Time derivative of magnetic field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DerMag_found(void) {
      if constexpr (std::is_same<T, DerMag_t>::value)
         return true;
      else
         return Fields<Ts...>::DerMag_found();
   };
   

/*!
\brief Get DerAbsMag (Time derivative of magnetic field magnitude) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DerAbsMag_t& DerAbsMag(void) {
      if constexpr (std::is_same<T, DerAbsMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DerAbsMag();
   };

/*!
\brief Get DerAbsMag (Time derivative of magnetic field magnitude) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DerAbsMag_t& DerAbsMag(void) const {
      if constexpr (std::is_same<T, DerAbsMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DerAbsMag();
   };


/*!
\brief Whether DerAbsMag (Time derivative of magnetic field magnitude) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DerAbsMag_found(void) {
      if constexpr (std::is_same<T, DerAbsMag_t>::value)
         return true;
      else
         return Fields<Ts...>::DerAbsMag_found();
   };
   

/*!
\brief Get DerHatMag (Time derivative of magnetic field direction) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DerHatMag_t& DerHatMag(void) {
      if constexpr (std::is_same<T, DerHatMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DerHatMag();
   };

/*!
\brief Get DerHatMag (Time derivative of magnetic field direction) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DerHatMag_t& DerHatMag(void) const {
      if constexpr (std::is_same<T, DerHatMag_t>::value)
         return data;
      else
         return Fields<Ts...>::DerHatMag();
   };


/*!
\brief Whether DerHatMag (Time derivative of magnetic field direction) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool DerHatMag_found(void) {
      if constexpr (std::is_same<T, DerHatMag_t>::value)
         return true;
      else
         return Fields<Ts...>::DerHatMag_found();
   };
   

/*!
\brief Get PrimitiveStateGASDYN (Fields of the primitive form for a gas dynamics model) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   PrimitiveStateGASDYN_t& PrimitiveStateGASDYN(void) {
      if constexpr (std::is_same<T, PrimitiveStateGASDYN_t>::value)
         return data;
      else
         return Fields<Ts...>::PrimitiveStateGASDYN();
   };

/*!
\brief Get PrimitiveStateGASDYN (Fields of the primitive form for a gas dynamics model) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const PrimitiveStateGASDYN_t& PrimitiveStateGASDYN(void) const {
      if constexpr (std::is_same<T, PrimitiveStateGASDYN_t>::value)
         return data;
      else
         return Fields<Ts...>::PrimitiveStateGASDYN();
   };


/*!
\brief Whether PrimitiveStateGASDYN (Fields of the primitive form for a gas dynamics model) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool PrimitiveStateGASDYN_found(void) {
      if constexpr (std::is_same<T, PrimitiveStateGASDYN_t>::value)
         return true;
      else
         return Fields<Ts...>::PrimitiveStateGASDYN_found();
   };
   

/*!
\brief Get ConservedStateGASDYN (Fields of the conserved form for a gas dynamics model) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ConservedStateGASDYN_t& ConservedStateGASDYN(void) {
      if constexpr (std::is_same<T, ConservedStateGASDYN_t>::value)
         return data;
      else
         return Fields<Ts...>::ConservedStateGASDYN();
   };

/*!
\brief Get ConservedStateGASDYN (Fields of the conserved form for a gas dynamics model) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ConservedStateGASDYN_t& ConservedStateGASDYN(void) const {
      if constexpr (std::is_same<T, ConservedStateGASDYN_t>::value)
         return data;
      else
         return Fields<Ts...>::ConservedStateGASDYN();
   };


/*!
\brief Whether ConservedStateGASDYN (Fields of the conserved form for a gas dynamics model) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool ConservedStateGASDYN_found(void) {
      if constexpr (std::is_same<T, ConservedStateGASDYN_t>::value)
         return true;
      else
         return Fields<Ts...>::ConservedStateGASDYN_found();
   };
   

/*!
\brief Get FluxFunctionGASDYN (Fields of the flux function for a gas dynamics model) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FluxFunctionGASDYN_t& FluxFunctionGASDYN(void) {
      if constexpr (std::is_same<T, FluxFunctionGASDYN_t>::value)
         return data;
      else
         return Fields<Ts...>::FluxFunctionGASDYN();
   };

/*!
\brief Get FluxFunctionGASDYN (Fields of the flux function for a gas dynamics model) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FluxFunctionGASDYN_t& FluxFunctionGASDYN(void) const {
      if constexpr (std::is_same<T, FluxFunctionGASDYN_t>::value)
         return data;
      else
         return Fields<Ts...>::FluxFunctionGASDYN();
   };


/*!
\brief Whether FluxFunctionGASDYN (Fields of the flux function for a gas dynamics model) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool FluxFunctionGASDYN_found(void) {
      if constexpr (std::is_same<T, FluxFunctionGASDYN_t>::value)
         return true;
      else
         return Fields<Ts...>::FluxFunctionGASDYN_found();
   };
   

/*!
\brief Get PrimitiveStateMHD (Fields of the primitive form for an MHD model) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   PrimitiveStateMHD_t& PrimitiveStateMHD(void) {
      if constexpr (std::is_same<T, PrimitiveStateMHD_t>::value)
         return data;
      else
         return Fields<Ts...>::PrimitiveStateMHD();
   };

/*!
\brief Get PrimitiveStateMHD (Fields of the primitive form for an MHD model) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const PrimitiveStateMHD_t& PrimitiveStateMHD(void) const {
      if constexpr (std::is_same<T, PrimitiveStateMHD_t>::value)
         return data;
      else
         return Fields<Ts...>::PrimitiveStateMHD();
   };


/*!
\brief Whether PrimitiveStateMHD (Fields of the primitive form for an MHD model) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool PrimitiveStateMHD_found(void) {
      if constexpr (std::is_same<T, PrimitiveStateMHD_t>::value)
         return true;
      else
         return Fields<Ts...>::PrimitiveStateMHD_found();
   };
   

/*!
\brief Get ConservedStateMHD (Fields of the conserved form for an MHD model) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ConservedStateMHD_t& ConservedStateMHD(void) {
      if constexpr (std::is_same<T, ConservedStateMHD_t>::value)
         return data;
      else
         return Fields<Ts...>::ConservedStateMHD();
   };

/*!
\brief Get ConservedStateMHD (Fields of the conserved form for an MHD model) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ConservedStateMHD_t& ConservedStateMHD(void) const {
      if constexpr (std::is_same<T, ConservedStateMHD_t>::value)
         return data;
      else
         return Fields<Ts...>::ConservedStateMHD();
   };


/*!
\brief Whether ConservedStateMHD (Fields of the conserved form for an MHD model) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool ConservedStateMHD_found(void) {
      if constexpr (std::is_same<T, ConservedStateMHD_t>::value)
         return true;
      else
         return Fields<Ts...>::ConservedStateMHD_found();
   };
   

/*!
\brief Get FluxFunctionMHD (Fields of the flux function for an MHD model) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FluxFunctionMHD_t& FluxFunctionMHD(void) {
      if constexpr (std::is_same<T, FluxFunctionMHD_t>::value)
         return data;
      else
         return Fields<Ts...>::FluxFunctionMHD();
   };

/*!
\brief Get FluxFunctionMHD (Fields of the flux function for an MHD model) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FluxFunctionMHD_t& FluxFunctionMHD(void) const {
      if constexpr (std::is_same<T, FluxFunctionMHD_t>::value)
         return data;
      else
         return Fields<Ts...>::FluxFunctionMHD();
   };


/*!
\brief Whether FluxFunctionMHD (Fields of the flux function for an MHD model) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool FluxFunctionMHD_found(void) {
      if constexpr (std::is_same<T, FluxFunctionMHD_t>::value)
         return true;
      else
         return Fields<Ts...>::FluxFunctionMHD_found();
   };
   

/*!
\brief Get PrimitiveStateMHD_GLM (Fields of the primitive form for an MHD-GLM model) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   PrimitiveStateMHD_GLM_t& PrimitiveStateMHD_GLM(void) {
      if constexpr (std::is_same<T, PrimitiveStateMHD_GLM_t>::value)
         return data;
      else
         return Fields<Ts...>::PrimitiveStateMHD_GLM();
   };

/*!
\brief Get PrimitiveStateMHD_GLM (Fields of the primitive form for an MHD-GLM model) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const PrimitiveStateMHD_GLM_t& PrimitiveStateMHD_GLM(void) const {
      if constexpr (std::is_same<T, PrimitiveStateMHD_GLM_t>::value)
         return data;
      else
         return Fields<Ts...>::PrimitiveStateMHD_GLM();
   };


/*!
\brief Whether PrimitiveStateMHD_GLM (Fields of the primitive form for an MHD-GLM model) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool PrimitiveStateMHD_GLM_found(void) {
      if constexpr (std::is_same<T, PrimitiveStateMHD_GLM_t>::value)
         return true;
      else
         return Fields<Ts...>::PrimitiveStateMHD_GLM_found();
   };
   

/*!
\brief Get ConservedStateMHD_GLM (Fields of the conserved form for an MHD-GLM model) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ConservedStateMHD_GLM_t& ConservedStateMHD_GLM(void) {
      if constexpr (std::is_same<T, ConservedStateMHD_GLM_t>::value)
         return data;
      else
         return Fields<Ts...>::ConservedStateMHD_GLM();
   };

/*!
\brief Get ConservedStateMHD_GLM (Fields of the conserved form for an MHD-GLM model) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ConservedStateMHD_GLM_t& ConservedStateMHD_GLM(void) const {
      if constexpr (std::is_same<T, ConservedStateMHD_GLM_t>::value)
         return data;
      else
         return Fields<Ts...>::ConservedStateMHD_GLM();
   };


/*!
\brief Whether ConservedStateMHD_GLM (Fields of the conserved form for an MHD-GLM model) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool ConservedStateMHD_GLM_found(void) {
      if constexpr (std::is_same<T, ConservedStateMHD_GLM_t>::value)
         return true;
      else
         return Fields<Ts...>::ConservedStateMHD_GLM_found();
   };
   

/*!
\brief Get FluxFunctionMHD_GLM (Fields of the flux function for an MHD-GLM model) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FluxFunctionMHD_GLM_t& FluxFunctionMHD_GLM(void) {
      if constexpr (std::is_same<T, FluxFunctionMHD_GLM_t>::value)
         return data;
      else
         return Fields<Ts...>::FluxFunctionMHD_GLM();
   };

/*!
\brief Get FluxFunctionMHD_GLM (Fields of the flux function for an MHD-GLM model) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FluxFunctionMHD_GLM_t& FluxFunctionMHD_GLM(void) const {
      if constexpr (std::is_same<T, FluxFunctionMHD_GLM_t>::value)
         return data;
      else
         return Fields<Ts...>::FluxFunctionMHD_GLM();
   };


/*!
\brief Whether FluxFunctionMHD_GLM (Fields of the flux function for an MHD-GLM model) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   bool FluxFunctionMHD_GLM_found(void) {
      if constexpr (std::is_same<T, FluxFunctionMHD_GLM_t>::value)
         return true;
      else
         return Fields<Ts...>::FluxFunctionMHD_GLM_found();
   };
   

   // END(fields/generate, class)



/*!
\author Lucius Schoenbaum
\date 05/28/2025
\return string representation of state, for testing purposes
*/
   std::string str(bool recursive = false) const {
      std::string out;
      if (!recursive) out += "{";
      out += data.str() + ", " + Fields<Ts...>::str(true);
      if (!recursive) out += "}";
      return out;
   }

};


/*!
\brief Base for MHDtuple data type construction.
\author Lucius Schoenbaum
\author Vladimir Florinski
\note There is no doxygen documentation for features in this class,
as the information is only relevant to the implementation.
*/
template <typename T>
struct Fields<T> {

protected:

   T data;

   template <typename Function>
   void visit_unpacked(std::size_t i, Function&& f, auto&&... others) {
      if (i == 0)
         f(data, others.data...);
      else
         throw std::out_of_range("[MHDtuple] out of range");
   }

   template <typename Function>
   void foreach_unpacked(Function&& f, auto&&... others) {
      f(data, others.data...);
   }

public:

   Fields(void) = default;

   explicit Fields(T in):
       data(in)
   {};

   Fields& operator=(const Fields& other) {
      data = other.data;
      return *this;
   };

   size_t size() const {
      return 1;
   }
  
   const T& top() const {
      return data;
   }

   T& top() {
      return data;
   }

   std::any operator[](std::size_t index) const {
      if (index == 0)
         return data;
      else
         throw std::out_of_range("[Fields] out of range");
   }

   template <typename Function, typename Others>
   void visit(std::size_t i, Function&& f, Others&& others) {
      std::apply(
            [&](auto&&... others) {
               visit_unpacked(i, std::forward<Function>(f), std::forward<decltype(others)>(others)...);
            },
            std::forward<Others>(others)
      );
   }

   template <typename Function, typename Others>
   void foreach(Function&& f, Others&& others) {
      std::apply(
            [&](auto&&... others) {
               foreach_unpacked(std::forward<Function>(f), std::forward<decltype(others)>(others)...);
            },
            std::forward<Others>(others)
      );
   }

   template <typename Function>
   void foreach(Function&& f) {
      f(data);
   }

   template <typename T_store>
   void store(T_store x) {
      assign(data, x);
   }

   // BEGIN(fields/generate, base)

   Den_t& Den(void) {
      if constexpr (std::is_same<T, Den_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] Den (Fluid density field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Den_t& Den(void) const {
   if constexpr (std::is_same<T, Den_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] Den (Fluid density field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool Den_found(void) {
      if constexpr (std::is_same<T, Den_t>::value)
         return true;
      else
         return false;
   };

   Prs_t& Prs(void) {
      if constexpr (std::is_same<T, Prs_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] Prs (Fluid pressure field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Prs_t& Prs(void) const {
   if constexpr (std::is_same<T, Prs_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] Prs (Fluid pressure field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool Prs_found(void) {
      if constexpr (std::is_same<T, Prs_t>::value)
         return true;
      else
         return false;
   };

   Enr_t& Enr(void) {
      if constexpr (std::is_same<T, Enr_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] Enr (Fluid energy field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Enr_t& Enr(void) const {
   if constexpr (std::is_same<T, Enr_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] Enr (Fluid energy field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool Enr_found(void) {
      if constexpr (std::is_same<T, Enr_t>::value)
         return true;
      else
         return false;
   };

   Vel_t& Vel(void) {
      if constexpr (std::is_same<T, Vel_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] Vel (Fluid velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Vel_t& Vel(void) const {
   if constexpr (std::is_same<T, Vel_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] Vel (Fluid velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool Vel_found(void) {
      if constexpr (std::is_same<T, Vel_t>::value)
         return true;
      else
         return false;
   };

   Mom_t& Mom(void) {
      if constexpr (std::is_same<T, Mom_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] Mom (Fluid momentum field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Mom_t& Mom(void) const {
   if constexpr (std::is_same<T, Mom_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] Mom (Fluid momentum field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool Mom_found(void) {
      if constexpr (std::is_same<T, Mom_t>::value)
         return true;
      else
         return false;
   };

   FlxDen_t& FlxDen(void) {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] FlxDen (Fluid density flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxDen_t& FlxDen(void) const {
   if constexpr (std::is_same<T, FlxDen_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] FlxDen (Fluid density flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool FlxDen_found(void) {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return true;
      else
         return false;
   };

   FlxMom_t& FlxMom(void) {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] FlxMom (Fluid momentum flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxMom_t& FlxMom(void) const {
   if constexpr (std::is_same<T, FlxMom_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] FlxMom (Fluid momentum flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool FlxMom_found(void) {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return true;
      else
         return false;
   };

   FlxEnr_t& FlxEnr(void) {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] FlxEnr (Fluid energy flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxEnr_t& FlxEnr(void) const {
   if constexpr (std::is_same<T, FlxEnr_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] FlxEnr (Fluid energy flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool FlxEnr_found(void) {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return true;
      else
         return false;
   };

   Mag_t& Mag(void) {
      if constexpr (std::is_same<T, Mag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] Mag (Magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Mag_t& Mag(void) const {
   if constexpr (std::is_same<T, Mag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] Mag (Magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool Mag_found(void) {
      if constexpr (std::is_same<T, Mag_t>::value)
         return true;
      else
         return false;
   };

   FlxMag_t& FlxMag(void) {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] FlxMag (Magnetic field flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxMag_t& FlxMag(void) const {
   if constexpr (std::is_same<T, FlxMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] FlxMag (Magnetic field flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool FlxMag_found(void) {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return true;
      else
         return false;
   };

   Glm_t& Glm(void) {
      if constexpr (std::is_same<T, Glm_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] Glm (Lagrange multiplier field of GLM MHD) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Glm_t& Glm(void) const {
   if constexpr (std::is_same<T, Glm_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] Glm (Lagrange multiplier field of GLM MHD) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool Glm_found(void) {
      if constexpr (std::is_same<T, Glm_t>::value)
         return true;
      else
         return false;
   };

   FlxGlm_t& FlxGlm(void) {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] FlxGlm (Lagrange mutlipler flux function of GLM MHD) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxGlm_t& FlxGlm(void) const {
   if constexpr (std::is_same<T, FlxGlm_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] FlxGlm (Lagrange mutlipler flux function of GLM MHD) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool FlxGlm_found(void) {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return true;
      else
         return false;
   };

   Elc_t& Elc(void) {
      if constexpr (std::is_same<T, Elc_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] Elc (Electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Elc_t& Elc(void) const {
   if constexpr (std::is_same<T, Elc_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] Elc (Electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool Elc_found(void) {
      if constexpr (std::is_same<T, Elc_t>::value)
         return true;
      else
         return false;
   };

   AbsMag_t& AbsMag(void) {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] AbsMag (Magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const AbsMag_t& AbsMag(void) const {
   if constexpr (std::is_same<T, AbsMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] AbsMag (Magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool AbsMag_found(void) {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return true;
      else
         return false;
   };

   HatMag_t& HatMag(void) {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] HatMag (Magnetic field direction) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const HatMag_t& HatMag(void) const {
   if constexpr (std::is_same<T, HatMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] HatMag (Magnetic field direction) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool HatMag_found(void) {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return true;
      else
         return false;
   };

   DelVel_t& DelVel(void) {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DelVel (Gradient of velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelVel_t& DelVel(void) const {
   if constexpr (std::is_same<T, DelVel_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DelVel (Gradient of velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DelVel_found(void) {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return true;
      else
         return false;
   };

   DelElc_t& DelElc(void) {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DelElc (Gradient of electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelElc_t& DelElc(void) const {
   if constexpr (std::is_same<T, DelElc_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DelElc (Gradient of electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DelElc_found(void) {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return true;
      else
         return false;
   };

   DelMag_t& DelMag(void) {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DelMag (Gradient of magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelMag_t& DelMag(void) const {
   if constexpr (std::is_same<T, DelMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DelMag (Gradient of magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DelMag_found(void) {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return true;
      else
         return false;
   };

   DelAbsMag_t& DelAbsMag(void) {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DelAbsMag (Gradient of magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelAbsMag_t& DelAbsMag(void) const {
   if constexpr (std::is_same<T, DelAbsMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DelAbsMag (Gradient of magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DelAbsMag_found(void) {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return true;
      else
         return false;
   };

   DelHatMag_t& DelHatMag(void) {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DelHatMag (Gradient of magnetic field direction ) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelHatMag_t& DelHatMag(void) const {
   if constexpr (std::is_same<T, DelHatMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DelHatMag (Gradient of magnetic field direction ) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DelHatMag_found(void) {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return true;
      else
         return false;
   };

   DerVel_t& DerVel(void) {
      if constexpr (std::is_same<T, DerVel_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DerVel (Time derivative of velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DerVel_t& DerVel(void) const {
   if constexpr (std::is_same<T, DerVel_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DerVel (Time derivative of velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DerVel_found(void) {
      if constexpr (std::is_same<T, DerVel_t>::value)
         return true;
      else
         return false;
   };

   DerElc_t& DerElc(void) {
      if constexpr (std::is_same<T, DerElc_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DerElc (Time derivative of electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DerElc_t& DerElc(void) const {
   if constexpr (std::is_same<T, DerElc_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DerElc (Time derivative of electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DerElc_found(void) {
      if constexpr (std::is_same<T, DerElc_t>::value)
         return true;
      else
         return false;
   };

   DerMag_t& DerMag(void) {
      if constexpr (std::is_same<T, DerMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DerMag (Time derivative of magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DerMag_t& DerMag(void) const {
   if constexpr (std::is_same<T, DerMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DerMag (Time derivative of magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DerMag_found(void) {
      if constexpr (std::is_same<T, DerMag_t>::value)
         return true;
      else
         return false;
   };

   DerAbsMag_t& DerAbsMag(void) {
      if constexpr (std::is_same<T, DerAbsMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DerAbsMag (Time derivative of magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DerAbsMag_t& DerAbsMag(void) const {
   if constexpr (std::is_same<T, DerAbsMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DerAbsMag (Time derivative of magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DerAbsMag_found(void) {
      if constexpr (std::is_same<T, DerAbsMag_t>::value)
         return true;
      else
         return false;
   };

   DerHatMag_t& DerHatMag(void) {
      if constexpr (std::is_same<T, DerHatMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] DerHatMag (Time derivative of magnetic field direction) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DerHatMag_t& DerHatMag(void) const {
   if constexpr (std::is_same<T, DerHatMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] DerHatMag (Time derivative of magnetic field direction) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool DerHatMag_found(void) {
      if constexpr (std::is_same<T, DerHatMag_t>::value)
         return true;
      else
         return false;
   };

   PrimitiveStateGASDYN_t& PrimitiveStateGASDYN(void) {
      if constexpr (std::is_same<T, PrimitiveStateGASDYN_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] PrimitiveStateGASDYN (Fields of the primitive form for a gas dynamics model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const PrimitiveStateGASDYN_t& PrimitiveStateGASDYN(void) const {
   if constexpr (std::is_same<T, PrimitiveStateGASDYN_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] PrimitiveStateGASDYN (Fields of the primitive form for a gas dynamics model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool PrimitiveStateGASDYN_found(void) {
      if constexpr (std::is_same<T, PrimitiveStateGASDYN_t>::value)
         return true;
      else
         return false;
   };

   ConservedStateGASDYN_t& ConservedStateGASDYN(void) {
      if constexpr (std::is_same<T, ConservedStateGASDYN_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] ConservedStateGASDYN (Fields of the conserved form for a gas dynamics model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const ConservedStateGASDYN_t& ConservedStateGASDYN(void) const {
   if constexpr (std::is_same<T, ConservedStateGASDYN_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] ConservedStateGASDYN (Fields of the conserved form for a gas dynamics model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool ConservedStateGASDYN_found(void) {
      if constexpr (std::is_same<T, ConservedStateGASDYN_t>::value)
         return true;
      else
         return false;
   };

   FluxFunctionGASDYN_t& FluxFunctionGASDYN(void) {
      if constexpr (std::is_same<T, FluxFunctionGASDYN_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] FluxFunctionGASDYN (Fields of the flux function for a gas dynamics model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FluxFunctionGASDYN_t& FluxFunctionGASDYN(void) const {
   if constexpr (std::is_same<T, FluxFunctionGASDYN_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] FluxFunctionGASDYN (Fields of the flux function for a gas dynamics model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool FluxFunctionGASDYN_found(void) {
      if constexpr (std::is_same<T, FluxFunctionGASDYN_t>::value)
         return true;
      else
         return false;
   };

   PrimitiveStateMHD_t& PrimitiveStateMHD(void) {
      if constexpr (std::is_same<T, PrimitiveStateMHD_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] PrimitiveStateMHD (Fields of the primitive form for an MHD model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const PrimitiveStateMHD_t& PrimitiveStateMHD(void) const {
   if constexpr (std::is_same<T, PrimitiveStateMHD_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] PrimitiveStateMHD (Fields of the primitive form for an MHD model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool PrimitiveStateMHD_found(void) {
      if constexpr (std::is_same<T, PrimitiveStateMHD_t>::value)
         return true;
      else
         return false;
   };

   ConservedStateMHD_t& ConservedStateMHD(void) {
      if constexpr (std::is_same<T, ConservedStateMHD_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] ConservedStateMHD (Fields of the conserved form for an MHD model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const ConservedStateMHD_t& ConservedStateMHD(void) const {
   if constexpr (std::is_same<T, ConservedStateMHD_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] ConservedStateMHD (Fields of the conserved form for an MHD model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool ConservedStateMHD_found(void) {
      if constexpr (std::is_same<T, ConservedStateMHD_t>::value)
         return true;
      else
         return false;
   };

   FluxFunctionMHD_t& FluxFunctionMHD(void) {
      if constexpr (std::is_same<T, FluxFunctionMHD_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] FluxFunctionMHD (Fields of the flux function for an MHD model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FluxFunctionMHD_t& FluxFunctionMHD(void) const {
   if constexpr (std::is_same<T, FluxFunctionMHD_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] FluxFunctionMHD (Fields of the flux function for an MHD model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool FluxFunctionMHD_found(void) {
      if constexpr (std::is_same<T, FluxFunctionMHD_t>::value)
         return true;
      else
         return false;
   };

   PrimitiveStateMHD_GLM_t& PrimitiveStateMHD_GLM(void) {
      if constexpr (std::is_same<T, PrimitiveStateMHD_GLM_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] PrimitiveStateMHD_GLM (Fields of the primitive form for an MHD-GLM model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const PrimitiveStateMHD_GLM_t& PrimitiveStateMHD_GLM(void) const {
   if constexpr (std::is_same<T, PrimitiveStateMHD_GLM_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] PrimitiveStateMHD_GLM (Fields of the primitive form for an MHD-GLM model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool PrimitiveStateMHD_GLM_found(void) {
      if constexpr (std::is_same<T, PrimitiveStateMHD_GLM_t>::value)
         return true;
      else
         return false;
   };

   ConservedStateMHD_GLM_t& ConservedStateMHD_GLM(void) {
      if constexpr (std::is_same<T, ConservedStateMHD_GLM_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] ConservedStateMHD_GLM (Fields of the conserved form for an MHD-GLM model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const ConservedStateMHD_GLM_t& ConservedStateMHD_GLM(void) const {
   if constexpr (std::is_same<T, ConservedStateMHD_GLM_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] ConservedStateMHD_GLM (Fields of the conserved form for an MHD-GLM model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool ConservedStateMHD_GLM_found(void) {
      if constexpr (std::is_same<T, ConservedStateMHD_GLM_t>::value)
         return true;
      else
         return false;
   };

   FluxFunctionMHD_GLM_t& FluxFunctionMHD_GLM(void) {
      if constexpr (std::is_same<T, FluxFunctionMHD_GLM_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Fields] FluxFunctionMHD_GLM (Fields of the flux function for an MHD-GLM model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FluxFunctionMHD_GLM_t& FluxFunctionMHD_GLM(void) const {
   if constexpr (std::is_same<T, FluxFunctionMHD_GLM_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Fields] FluxFunctionMHD_GLM (Fields of the flux function for an MHD-GLM model) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   bool FluxFunctionMHD_GLM_found(void) {
      if constexpr (std::is_same<T, FluxFunctionMHD_GLM_t>::value)
         return true;
      else
         return false;
   };

   // END(fields/generate, base)

   /*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Divergence of U
*/
   inline double divU(void)
   {
      return DelVel().Trace();
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Divergence of B
*/
   inline double divB(void)
   {
      return DelMag().Trace();
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Divergence of E
*/
   inline double divE(void)
   {
      return DelElc().Trace();
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Curl of U
*/
   inline GeoVector curlU(void)
   {
      GeoVector vec_tmp;
      GeoMatrix G = DelVel();
      vec_tmp[0] = G[1][2] - G[2][1];
      vec_tmp[1] = G[2][0] - G[0][2];
      vec_tmp[2] = G[0][1] - G[1][0];
      return vec_tmp;
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Curl of B
*/
   inline GeoVector curlB(void)
   {
      GeoVector vec_tmp;
      GeoMatrix G = DelMag();
      vec_tmp[0] = G[1][2] - G[2][1];
      vec_tmp[1] = G[2][0] - G[0][2];
      vec_tmp[2] = G[0][1] - G[1][0];
      return vec_tmp;
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Curl of E
*/
   inline GeoVector curlE(void)
   {
      GeoVector vec_tmp;
      GeoMatrix G = DelElc();
      vec_tmp[0] = G[1][2] - G[2][1];
      vec_tmp[1] = G[2][0] - G[0][2];
      vec_tmp[2] = G[0][1] - G[1][0];
      return vec_tmp;
   };



/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Divergence of bhat
\note The formula comes from applying vector identity (7) in the NRL Plasma formulary
*/
   double divbhat()
   {
      auto bhat = DerMag();
      auto Bmag = AbsMag();
      auto gradBmag = DelAbsMag();
      auto Bdiv = divB();
      double x1 = gradBmag * bhat;
      auto x2 = Bdiv - x1;
      auto x3 = x2/Bmag;
      return x3;
   };

/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Curl of bhat
\note The formula comes from applying vector identity (8) in the NRL Plasma formulary
*/
   GeoVector curlbhat()
   {
      auto bhat = HatMag();
      // todo fix when using auto or MmagT to set type
      double Bmag = AbsMag();
      auto gradBmag = DelAbsMag();
      return (curlB() - (gradBmag ^ bhat)) / Bmag;
   };

/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Gradient of bhat
\note The formula comes from expanding \partial_i bhat_j = d/dx^i (B_j / B)
*/
   GeoMatrix gradbhat()
   {
      auto bhat = HatMag();
      double Bmag = AbsMag();
      auto gradB = DelMag();
      auto gradBmag = DelAbsMag();
      // todo Dyadic can be made static
      GeoMatrix tmp;
      tmp.Dyadic(gradBmag, bhat);
      return (gradB - tmp) / Bmag;
   };

/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Time derivative of bhat
*/
   GeoVector dbhatdt()
   {
      auto dBvecdt = DerMag();
      auto dBmagdt = DerAbsMag();
      auto bhat = HatMag();
      double Bmag = AbsMag();
      return (dBvecdt - (dBmagdt * bhat)) / Bmag;
   };



   std::string str(bool recursive = false) const {
      if (recursive)
         return data.str();
      else
         return "{" + data.str() + "}";
   }

};

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] tup const Fields type
\return The `I`th member of tuple, for template argument integer `I`
 \note The calling pattern is the same as that of std::get.
\note The value of template argument `I` must be known at compile time,
which can constraint usage in some situations. In these cases you may be
able use class method foreach() with one of the argument signatures.
*/
template <std::size_t I, typename T, typename... Ts>
decltype(auto) get(const Fields<T, Ts...>& tup) {
   if constexpr (I == 0)
      return tup.top();
   else
      return get<I-1>(static_cast<const Fields<Ts...>&>(tup));
}

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] tup Fields type
\return The `I`th member of tuple, for template argument integer `I`
\note The calling pattern is the same as that of std::get.
\note The value of template argument `I` must be known at compile time,
which can constraint usage in some situations. In these cases you may be
able use class method foreach() with one of the argument signatures.
*/
template <std::size_t I, typename T, typename... Ts>
decltype(auto) get(Fields<T, Ts...>& tup) {
   if constexpr (I == 0)
      return tup.top();
   else
      return get<I - 1>(static_cast<Fields<Ts...> &>(tup));
}

};

#endif
