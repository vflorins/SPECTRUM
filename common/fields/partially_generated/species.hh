/*!
\file namedmhdtuple.hh
\author Vladimir Florinski
\author Lucius Schoenbaum
\author Juan G Alonso Guzman

This file is part of the SPECTRUM suite of scientific numerical simulation codes. SPECTRUM stands for Space Plasma and Energetic Charged particle TRansport on Unstructured Meshes. The code simulates plasma or neutral particle flows using MHD equations on a grid, transport of cosmic rays using stochastic or grid based methods. The "unstructured" part refers to the use of a geodesic mesh providing a uniform coverage of the surface of a sphere.
*/

/*
This file contains a block of code generated by generate.py.
Do not edit the contents of this file within the block bounded by
the pragmas "BEGIN(fields/generate)" and "END(fields/generate)",
instead edit the file `generated/generate.py`.
Elsewhere, this file can be edited normally.
*/

#ifndef SPECTRUM_SPECIES_HH
#define SPECTRUM_SPECIES_HH

#include <iostream>
#include <any>
#include <stdexcept>
#include "../generated/field_types.hh"

namespace Spectrum {

/*!
\brief Multi-purpose class storing physical data defined at a spatial location.
Used in the data interface with the (pseudo-)particle tracer, and to house
data distributed on the grid.
\author Lucius Schoenbaum
\author Vladimir Florinski
\note Recursion in protected methods takes place only once, at compile time.
*/
template <Field::Id nameid, typename T, typename ... Ts>
struct Species: public Species<nameid, Ts...> {

protected:

   T data;

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] index index into tuple
\param[in] f universal reference function, typically rvalue lambda defined at time of call
\param[in] others variadic universal reference of other tuples having the same tuple type
\note Public access via visit()
*/
   template <typename Function>
   void visit_unpacked(std::size_t index, Function&& f, auto&&... others) {
      if (index == 0) {
         f(data, others.data...);
      } else {
         Species<nameid, Ts...>::visit_unpacked(index - 1, std::forward<Function>(f), static_cast<Species<nameid, Ts...>>(others)...);
      }
   }

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] f universal reference function, typically rvalue lambda defined at time of call
\param[in] others variadic universal reference of other tuples having the same tuple type
\note Public access via foreach()
*/
   template <typename Function>
   void foreach_unpacked(Function&& f, auto&&... others) {
      f(data, others.data...);
      Species<nameid, Ts...>::foreach_unpacked(std::forward<Function>(f), static_cast<Species<nameid, Ts...>>(others)...);
   }


/*!
\brief Assignment if types match, otherwise do not compile.
\author Lucius Schoenbaum
\date 06/25/2025
\param[in] x1, x2 possibly mismatched value/variable instances
*/
   template <typename T1, typename T2>
   void assign(T1& x1, const T2& x2) {
      if constexpr (std::is_same<T1, T2>::value) {
         x1 = x2;
      }
   }

public:

   static constexpr const std::string_view name = Field::Names[nameid];

   Species(void) = default;

   explicit Species(T in, Ts... rest):
      Species<nameid, Ts...>(rest...),
       data(in)
   {};


/*!
\author Lucius Schoenbaum
\author Vladimir Florinski
\date 07/02/2024
\param[in] other Structure to copy from
\return Reference to the object
*/
   Species& operator=(const Species& other) {
      Species<nameid, Ts...>::operator=(other);
      data = other.data;
      return *this;
   };
  
/*!
\author Lucius Schoenbaum
\date 05/28/2025
\return size of tuple
*/
   size_t size() const {
      return sizeof...(Ts)+1;
   }
  
/*!
\author Lucius Schoenbaum
\date 05/28/2025
\return constant reference to top element of tuple
*/
   const T& top() const {
      return data;
   }

/*!
\author Lucius Schoenbaum
\date 05/28/2025
\return reference to top element of tuple
*/
   T& top() {
      return data;
   }

/*!
\author Lucius Schoenbaum
\date 05/28/2025
\param[in] index index into tuple
\return Reference to member of tuple evaluated at runtime
\note Type of return value must be known (and any_cast to) by caller. 
If this is not the case, use get<index>(mhdtuple).
*/
   std::any operator[](std::size_t index) const {
      if (index == 0)
         return data;
      else
         return Species<nameid, Ts...>::operator[](index-1);
   }

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] index index into tuple
\param[in] f universal reference function, typically rvalue lambda defined at time of call
\param[in] others variadic universal reference of other tuples having the same tuple type
*/
   template <typename Function, typename Others>
   void visit(std::size_t i, Function&& f, Others&& others) {
      std::apply(
            [&](auto&&... others) {
               visit_unpacked(i, std::forward<Function>(f), std::forward<decltype(others)>(others)...);
            },
            std::forward<Others>(others)
      );
   }



/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] f universal reference function, typically rvalue lambda defined at time of call
\param[in] others variadic universal reference of other tuples having the same tuple type
*/
   template <typename Function, typename Others>
   void foreach(Function&& f, Others&& others) {
      std::apply(
            [&](auto&&... others) {
               foreach_unpacked(std::forward<Function>(f), std::forward<decltype(others)>(others)...);
            },
            std::forward<Others>(others)
      );
   }

/*!
\author Lucius Schoenbaum
\date 05/28/2025
\param[in] f Function to evaluate on each tuple member
\return Reference to the object
*/
   template <typename Function>
   void foreach(Function&& f) {
      f(data);
      Species<nameid, Ts...>::foreach(f);
   }

/*!
\brief Store a quantity by type
\author Lucius Schoenbaum
\date 06/25/2025
\param[in] x Quantity to store
Note: This method is functionally invalid if the tuple
contains multiple members with the same data type.
This should not occur in fluid or MHD applications.
 */
   template <typename T_store>
   void store(T_store x) {
      assign(data, x);
      Species<nameid, Ts...>::store(x);
   }


   // BEGIN(fields/generate, class)

/*!
\brief Get Den (Fluid density field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Den_t& Den(void) {
      if constexpr (std::is_same<T, Den_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Den();
   };

/*!
\brief Get Den (Fluid density field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Den_t& Den(void) const {
      if constexpr (std::is_same<T, Den_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Den();
   };


/*!
\brief Whether Den (Fluid density field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Den_found(void) {
      if constexpr (std::is_same<T, Den_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Den_found();
   };
   

/*!
\brief Get Prs (Fluid pressure field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Prs_t& Prs(void) {
      if constexpr (std::is_same<T, Prs_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Prs();
   };

/*!
\brief Get Prs (Fluid pressure field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Prs_t& Prs(void) const {
      if constexpr (std::is_same<T, Prs_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Prs();
   };


/*!
\brief Whether Prs (Fluid pressure field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Prs_found(void) {
      if constexpr (std::is_same<T, Prs_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Prs_found();
   };
   

/*!
\brief Get Enr (Fluid energy field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Enr_t& Enr(void) {
      if constexpr (std::is_same<T, Enr_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Enr();
   };

/*!
\brief Get Enr (Fluid energy field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Enr_t& Enr(void) const {
      if constexpr (std::is_same<T, Enr_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Enr();
   };


/*!
\brief Whether Enr (Fluid energy field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Enr_found(void) {
      if constexpr (std::is_same<T, Enr_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Enr_found();
   };
   

/*!
\brief Get Vel (Fluid velocity field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Vel_t& Vel(void) {
      if constexpr (std::is_same<T, Vel_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Vel();
   };

/*!
\brief Get Vel (Fluid velocity field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Vel_t& Vel(void) const {
      if constexpr (std::is_same<T, Vel_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Vel();
   };


/*!
\brief Whether Vel (Fluid velocity field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Vel_found(void) {
      if constexpr (std::is_same<T, Vel_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Vel_found();
   };
   

/*!
\brief Get Mom (Fluid momentum field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Mom_t& Mom(void) {
      if constexpr (std::is_same<T, Mom_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Mom();
   };

/*!
\brief Get Mom (Fluid momentum field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Mom_t& Mom(void) const {
      if constexpr (std::is_same<T, Mom_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Mom();
   };


/*!
\brief Whether Mom (Fluid momentum field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Mom_found(void) {
      if constexpr (std::is_same<T, Mom_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Mom_found();
   };
   

/*!
\brief Get FlxDen (Fluid density flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxDen_t& FlxDen(void) {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxDen();
   };

/*!
\brief Get FlxDen (Fluid density flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxDen_t& FlxDen(void) const {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxDen();
   };


/*!
\brief Whether FlxDen (Fluid density flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxDen_found(void) {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::FlxDen_found();
   };
   

/*!
\brief Get FlxMom (Fluid momentum flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxMom_t& FlxMom(void) {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxMom();
   };

/*!
\brief Get FlxMom (Fluid momentum flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxMom_t& FlxMom(void) const {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxMom();
   };


/*!
\brief Whether FlxMom (Fluid momentum flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxMom_found(void) {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::FlxMom_found();
   };
   

/*!
\brief Get FlxEnr (Fluid energy flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxEnr_t& FlxEnr(void) {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxEnr();
   };

/*!
\brief Get FlxEnr (Fluid energy flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxEnr_t& FlxEnr(void) const {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxEnr();
   };


/*!
\brief Whether FlxEnr (Fluid energy flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxEnr_found(void) {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::FlxEnr_found();
   };
   

/*!
\brief Get Mag (Magnetic field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Mag_t& Mag(void) {
      if constexpr (std::is_same<T, Mag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Mag();
   };

/*!
\brief Get Mag (Magnetic field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Mag_t& Mag(void) const {
      if constexpr (std::is_same<T, Mag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Mag();
   };


/*!
\brief Whether Mag (Magnetic field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Mag_found(void) {
      if constexpr (std::is_same<T, Mag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Mag_found();
   };
   

/*!
\brief Get FlxMag (Magnetic field flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxMag_t& FlxMag(void) {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxMag();
   };

/*!
\brief Get FlxMag (Magnetic field flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxMag_t& FlxMag(void) const {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxMag();
   };


/*!
\brief Whether FlxMag (Magnetic field flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxMag_found(void) {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::FlxMag_found();
   };
   

/*!
\brief Get Glm (Lagrange multiplier field of GLM MHD) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Glm_t& Glm(void) {
      if constexpr (std::is_same<T, Glm_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Glm();
   };

/*!
\brief Get Glm (Lagrange multiplier field of GLM MHD) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Glm_t& Glm(void) const {
      if constexpr (std::is_same<T, Glm_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Glm();
   };


/*!
\brief Whether Glm (Lagrange multiplier field of GLM MHD) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Glm_found(void) {
      if constexpr (std::is_same<T, Glm_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Glm_found();
   };
   

/*!
\brief Get FlxGlm (Lagrange mutlipler flux function of GLM MHD) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   FlxGlm_t& FlxGlm(void) {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxGlm();
   };

/*!
\brief Get FlxGlm (Lagrange mutlipler flux function of GLM MHD) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const FlxGlm_t& FlxGlm(void) const {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::FlxGlm();
   };


/*!
\brief Whether FlxGlm (Lagrange mutlipler flux function of GLM MHD) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxGlm_found(void) {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::FlxGlm_found();
   };
   

/*!
\brief Get Elc (Electric field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Elc_t& Elc(void) {
      if constexpr (std::is_same<T, Elc_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Elc();
   };

/*!
\brief Get Elc (Electric field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Elc_t& Elc(void) const {
      if constexpr (std::is_same<T, Elc_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Elc();
   };


/*!
\brief Whether Elc (Electric field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Elc_found(void) {
      if constexpr (std::is_same<T, Elc_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Elc_found();
   };
   

/*!
\brief Get AbsMag (Magnetic field magnitude) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   AbsMag_t& AbsMag(void) {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::AbsMag();
   };

/*!
\brief Get AbsMag (Magnetic field magnitude) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const AbsMag_t& AbsMag(void) const {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::AbsMag();
   };


/*!
\brief Whether AbsMag (Magnetic field magnitude) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool AbsMag_found(void) {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::AbsMag_found();
   };
   

/*!
\brief Get HatMag (Magnetic field direction) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   HatMag_t& HatMag(void) {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::HatMag();
   };

/*!
\brief Get HatMag (Magnetic field direction) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const HatMag_t& HatMag(void) const {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::HatMag();
   };


/*!
\brief Whether HatMag (Magnetic field direction) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool HatMag_found(void) {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::HatMag_found();
   };
   

/*!
\brief Get DelVel (Gradient of velocity field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelVel_t& DelVel(void) {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelVel();
   };

/*!
\brief Get DelVel (Gradient of velocity field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelVel_t& DelVel(void) const {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelVel();
   };


/*!
\brief Whether DelVel (Gradient of velocity field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelVel_found(void) {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DelVel_found();
   };
   

/*!
\brief Get DelElc (Gradient of electric field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelElc_t& DelElc(void) {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelElc();
   };

/*!
\brief Get DelElc (Gradient of electric field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelElc_t& DelElc(void) const {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelElc();
   };


/*!
\brief Whether DelElc (Gradient of electric field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelElc_found(void) {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DelElc_found();
   };
   

/*!
\brief Get DelMag (Gradient of magnetic field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelMag_t& DelMag(void) {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelMag();
   };

/*!
\brief Get DelMag (Gradient of magnetic field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelMag_t& DelMag(void) const {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelMag();
   };


/*!
\brief Whether DelMag (Gradient of magnetic field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelMag_found(void) {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DelMag_found();
   };
   

/*!
\brief Get DelAbsMag (Gradient of magnetic field magnitude) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelAbsMag_t& DelAbsMag(void) {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelAbsMag();
   };

/*!
\brief Get DelAbsMag (Gradient of magnetic field magnitude) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelAbsMag_t& DelAbsMag(void) const {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelAbsMag();
   };


/*!
\brief Whether DelAbsMag (Gradient of magnetic field magnitude) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelAbsMag_found(void) {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DelAbsMag_found();
   };
   

/*!
\brief Get DelHatMag (Gradient of magnetic field direction ) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DelHatMag_t& DelHatMag(void) {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelHatMag();
   };

/*!
\brief Get DelHatMag (Gradient of magnetic field direction ) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DelHatMag_t& DelHatMag(void) const {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DelHatMag();
   };


/*!
\brief Whether DelHatMag (Gradient of magnetic field direction ) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelHatMag_found(void) {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DelHatMag_found();
   };
   

/*!
\brief Get DdtVel (Time derivative of velocity field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DdtVel_t& DdtVel(void) {
      if constexpr (std::is_same<T, DdtVel_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtVel();
   };

/*!
\brief Get DdtVel (Time derivative of velocity field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DdtVel_t& DdtVel(void) const {
      if constexpr (std::is_same<T, DdtVel_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtVel();
   };


/*!
\brief Whether DdtVel (Time derivative of velocity field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtVel_found(void) {
      if constexpr (std::is_same<T, DdtVel_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DdtVel_found();
   };
   

/*!
\brief Get DdtElc (Time derivative of electric field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DdtElc_t& DdtElc(void) {
      if constexpr (std::is_same<T, DdtElc_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtElc();
   };

/*!
\brief Get DdtElc (Time derivative of electric field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DdtElc_t& DdtElc(void) const {
      if constexpr (std::is_same<T, DdtElc_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtElc();
   };


/*!
\brief Whether DdtElc (Time derivative of electric field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtElc_found(void) {
      if constexpr (std::is_same<T, DdtElc_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DdtElc_found();
   };
   

/*!
\brief Get DdtMag (Time derivative of magnetic field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DdtMag_t& DdtMag(void) {
      if constexpr (std::is_same<T, DdtMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtMag();
   };

/*!
\brief Get DdtMag (Time derivative of magnetic field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DdtMag_t& DdtMag(void) const {
      if constexpr (std::is_same<T, DdtMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtMag();
   };


/*!
\brief Whether DdtMag (Time derivative of magnetic field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtMag_found(void) {
      if constexpr (std::is_same<T, DdtMag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DdtMag_found();
   };
   

/*!
\brief Get DdtAbsMag (Time derivative of magnetic field magnitude) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DdtAbsMag_t& DdtAbsMag(void) {
      if constexpr (std::is_same<T, DdtAbsMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtAbsMag();
   };

/*!
\brief Get DdtAbsMag (Time derivative of magnetic field magnitude) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DdtAbsMag_t& DdtAbsMag(void) const {
      if constexpr (std::is_same<T, DdtAbsMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtAbsMag();
   };


/*!
\brief Whether DdtAbsMag (Time derivative of magnetic field magnitude) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtAbsMag_found(void) {
      if constexpr (std::is_same<T, DdtAbsMag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DdtAbsMag_found();
   };
   

/*!
\brief Get DdtHatMag (Time derivative of magnetic field direction) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   DdtHatMag_t& DdtHatMag(void) {
      if constexpr (std::is_same<T, DdtHatMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtHatMag();
   };

/*!
\brief Get DdtHatMag (Time derivative of magnetic field direction) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const DdtHatMag_t& DdtHatMag(void) const {
      if constexpr (std::is_same<T, DdtHatMag_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::DdtHatMag();
   };


/*!
\brief Whether DdtHatMag (Time derivative of magnetic field direction) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtHatMag_found(void) {
      if constexpr (std::is_same<T, DdtHatMag_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::DdtHatMag_found();
   };
   

/*!
\brief Get Iv0 (Zeroth (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Iv0_t& Iv0(void) {
      if constexpr (std::is_same<T, Iv0_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv0();
   };

/*!
\brief Get Iv0 (Zeroth (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Iv0_t& Iv0(void) const {
      if constexpr (std::is_same<T, Iv0_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv0();
   };


/*!
\brief Whether Iv0 (Zeroth (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv0_found(void) {
      if constexpr (std::is_same<T, Iv0_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Iv0_found();
   };
   

/*!
\brief Get Iv1 (First (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Iv1_t& Iv1(void) {
      if constexpr (std::is_same<T, Iv1_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv1();
   };

/*!
\brief Get Iv1 (First (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Iv1_t& Iv1(void) const {
      if constexpr (std::is_same<T, Iv1_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv1();
   };


/*!
\brief Whether Iv1 (First (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv1_found(void) {
      if constexpr (std::is_same<T, Iv1_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Iv1_found();
   };
   

/*!
\brief Get Iv2 (Second (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Iv2_t& Iv2(void) {
      if constexpr (std::is_same<T, Iv2_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv2();
   };

/*!
\brief Get Iv2 (Second (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Iv2_t& Iv2(void) const {
      if constexpr (std::is_same<T, Iv2_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv2();
   };


/*!
\brief Whether Iv2 (Second (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv2_found(void) {
      if constexpr (std::is_same<T, Iv2_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Iv2_found();
   };
   

/*!
\brief Get Iv3 (Third (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Iv3_t& Iv3(void) {
      if constexpr (std::is_same<T, Iv3_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv3();
   };

/*!
\brief Get Iv3 (Third (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Iv3_t& Iv3(void) const {
      if constexpr (std::is_same<T, Iv3_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv3();
   };


/*!
\brief Whether Iv3 (Third (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv3_found(void) {
      if constexpr (std::is_same<T, Iv3_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Iv3_found();
   };
   

/*!
\brief Get Iv4 (Fourth (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Iv4_t& Iv4(void) {
      if constexpr (std::is_same<T, Iv4_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv4();
   };

/*!
\brief Get Iv4 (Fourth (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Iv4_t& Iv4(void) const {
      if constexpr (std::is_same<T, Iv4_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv4();
   };


/*!
\brief Whether Iv4 (Fourth (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv4_found(void) {
      if constexpr (std::is_same<T, Iv4_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Iv4_found();
   };
   

/*!
\brief Get Iv5 (Fifth (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   Iv5_t& Iv5(void) {
      if constexpr (std::is_same<T, Iv5_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv5();
   };

/*!
\brief Get Iv5 (Fifth (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const Iv5_t& Iv5(void) const {
      if constexpr (std::is_same<T, Iv5_t>::value)
         return data;
      else
         return Species<nameid, Ts...>::Iv5();
   };


/*!
\brief Whether Iv5 (Fifth (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv5_found(void) {
      if constexpr (std::is_same<T, Iv5_t>::value)
         return true;
      else
         return Species<nameid, Ts...>::Iv5_found();
   };
   

   // END(fields/generate, class)


/*!
\author Lucius Schoenbaum
\date 05/28/2025
\return string representation of state, for testing purposes
*/
   std::string str(bool recursive = false) const {
      std::string out;
      if (!recursive) out += std::string(Field::Names[nameid]) + "{";
      out += data.str() + ", " + Species<nameid, Ts...>::str(true);
      if (!recursive) out += "}";
      return out;
   }

};


/*!
\brief Base for NamedFields data type construction.
\author Lucius Schoenbaum
\author Vladimir Florinski
\note There is no doxygen documentation for features in this class,
as the information is only relevant to the implementation.
*/
template <Field::Id nameid, typename T>
struct Species<nameid, T> {

protected:

   T data;

   template <typename Function>
   void visit_unpacked(std::size_t index, Function&& f, auto&&... others) {
      if (index == 0)
         f(data, others.data...);
      else
         throw std::out_of_range("[NamedFields] out of range");
   }

   template <typename Function>
   void foreach_unpacked(Function&& f, auto&&... others) {
      f(data, others.data...);
   }

   template <typename T1, typename T2>
   void assign(T1& x1, const T2& x2) {
      if constexpr (std::is_same<T1, T2>::value) {
         x1 = x2;
      }
   }

public:

   static constexpr const std::string_view name = Field::Names[nameid];

   Species(void) = default;

   explicit Species(T in):
       data(in)
   {};


   Species& operator=(const Species& other) {
      data = other.data;
      return *this;
   };

   size_t size() const {
      return 1;
   }
  
   const T& top() const {
      return data;
   }

   T& top() {
      return data;
   }

   std::any operator[](std::size_t index) const {
      if (index == 0)
         return data;
      else
         throw std::out_of_range("[NamedFields] out of range");
   }

   template <typename Function, typename Others>
   void visit(std::size_t index, Function&& f, Others&& others) {
      std::apply(
            [&](auto&&... others) {
               visit_unpacked(index, std::forward<Function>(f), std::forward<decltype(others)>(others)...);
            },
            std::forward<Others>(others)
      );
   }

   template <typename Function, typename Others>
   void foreach(Function&& f, Others&& others) {
      std::apply(
            [&](auto&&... others) {
               foreach_unpacked(std::forward<Function>(f), std::forward<decltype(others)>(others)...);
            },
            std::forward<Others>(others)
      );
   }

   template <typename Function>
   void foreach(Function&& f) {
      f(data);
   }

   template <typename T_store>
   void store(T_store x) {
      assign(data, x);
   }

   // BEGIN(fields/generate, base)

   Den_t& Den(void) {
      if constexpr (std::is_same<T, Den_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Den (Fluid density field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Den_t& Den(void) const {
   if constexpr (std::is_same<T, Den_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Den (Fluid density field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Den_found(void) {
      if constexpr (std::is_same<T, Den_t>::value)
         return true;
      else
         return false;
   };

   Prs_t& Prs(void) {
      if constexpr (std::is_same<T, Prs_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Prs (Fluid pressure field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Prs_t& Prs(void) const {
   if constexpr (std::is_same<T, Prs_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Prs (Fluid pressure field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Prs_found(void) {
      if constexpr (std::is_same<T, Prs_t>::value)
         return true;
      else
         return false;
   };

   Enr_t& Enr(void) {
      if constexpr (std::is_same<T, Enr_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Enr (Fluid energy field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Enr_t& Enr(void) const {
   if constexpr (std::is_same<T, Enr_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Enr (Fluid energy field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Enr_found(void) {
      if constexpr (std::is_same<T, Enr_t>::value)
         return true;
      else
         return false;
   };

   Vel_t& Vel(void) {
      if constexpr (std::is_same<T, Vel_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Vel (Fluid velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Vel_t& Vel(void) const {
   if constexpr (std::is_same<T, Vel_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Vel (Fluid velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Vel_found(void) {
      if constexpr (std::is_same<T, Vel_t>::value)
         return true;
      else
         return false;
   };

   Mom_t& Mom(void) {
      if constexpr (std::is_same<T, Mom_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Mom (Fluid momentum field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Mom_t& Mom(void) const {
   if constexpr (std::is_same<T, Mom_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Mom (Fluid momentum field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Mom_found(void) {
      if constexpr (std::is_same<T, Mom_t>::value)
         return true;
      else
         return false;
   };

   FlxDen_t& FlxDen(void) {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] FlxDen (Fluid density flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxDen_t& FlxDen(void) const {
   if constexpr (std::is_same<T, FlxDen_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] FlxDen (Fluid density flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool FlxDen_found(void) {
      if constexpr (std::is_same<T, FlxDen_t>::value)
         return true;
      else
         return false;
   };

   FlxMom_t& FlxMom(void) {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] FlxMom (Fluid momentum flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxMom_t& FlxMom(void) const {
   if constexpr (std::is_same<T, FlxMom_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] FlxMom (Fluid momentum flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool FlxMom_found(void) {
      if constexpr (std::is_same<T, FlxMom_t>::value)
         return true;
      else
         return false;
   };

   FlxEnr_t& FlxEnr(void) {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] FlxEnr (Fluid energy flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxEnr_t& FlxEnr(void) const {
   if constexpr (std::is_same<T, FlxEnr_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] FlxEnr (Fluid energy flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool FlxEnr_found(void) {
      if constexpr (std::is_same<T, FlxEnr_t>::value)
         return true;
      else
         return false;
   };

   Mag_t& Mag(void) {
      if constexpr (std::is_same<T, Mag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Mag (Magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Mag_t& Mag(void) const {
   if constexpr (std::is_same<T, Mag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Mag (Magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Mag_found(void) {
      if constexpr (std::is_same<T, Mag_t>::value)
         return true;
      else
         return false;
   };

   FlxMag_t& FlxMag(void) {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] FlxMag (Magnetic field flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxMag_t& FlxMag(void) const {
   if constexpr (std::is_same<T, FlxMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] FlxMag (Magnetic field flux function) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool FlxMag_found(void) {
      if constexpr (std::is_same<T, FlxMag_t>::value)
         return true;
      else
         return false;
   };

   Glm_t& Glm(void) {
      if constexpr (std::is_same<T, Glm_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Glm (Lagrange multiplier field of GLM MHD) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Glm_t& Glm(void) const {
   if constexpr (std::is_same<T, Glm_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Glm (Lagrange multiplier field of GLM MHD) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Glm_found(void) {
      if constexpr (std::is_same<T, Glm_t>::value)
         return true;
      else
         return false;
   };

   FlxGlm_t& FlxGlm(void) {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] FlxGlm (Lagrange mutlipler flux function of GLM MHD) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const FlxGlm_t& FlxGlm(void) const {
   if constexpr (std::is_same<T, FlxGlm_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] FlxGlm (Lagrange mutlipler flux function of GLM MHD) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool FlxGlm_found(void) {
      if constexpr (std::is_same<T, FlxGlm_t>::value)
         return true;
      else
         return false;
   };

   Elc_t& Elc(void) {
      if constexpr (std::is_same<T, Elc_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Elc (Electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Elc_t& Elc(void) const {
   if constexpr (std::is_same<T, Elc_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Elc (Electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Elc_found(void) {
      if constexpr (std::is_same<T, Elc_t>::value)
         return true;
      else
         return false;
   };

   AbsMag_t& AbsMag(void) {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] AbsMag (Magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const AbsMag_t& AbsMag(void) const {
   if constexpr (std::is_same<T, AbsMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] AbsMag (Magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool AbsMag_found(void) {
      if constexpr (std::is_same<T, AbsMag_t>::value)
         return true;
      else
         return false;
   };

   HatMag_t& HatMag(void) {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] HatMag (Magnetic field direction) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const HatMag_t& HatMag(void) const {
   if constexpr (std::is_same<T, HatMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] HatMag (Magnetic field direction) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool HatMag_found(void) {
      if constexpr (std::is_same<T, HatMag_t>::value)
         return true;
      else
         return false;
   };

   DelVel_t& DelVel(void) {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DelVel (Gradient of velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelVel_t& DelVel(void) const {
   if constexpr (std::is_same<T, DelVel_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DelVel (Gradient of velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DelVel_found(void) {
      if constexpr (std::is_same<T, DelVel_t>::value)
         return true;
      else
         return false;
   };

   DelElc_t& DelElc(void) {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DelElc (Gradient of electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelElc_t& DelElc(void) const {
   if constexpr (std::is_same<T, DelElc_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DelElc (Gradient of electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DelElc_found(void) {
      if constexpr (std::is_same<T, DelElc_t>::value)
         return true;
      else
         return false;
   };

   DelMag_t& DelMag(void) {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DelMag (Gradient of magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelMag_t& DelMag(void) const {
   if constexpr (std::is_same<T, DelMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DelMag (Gradient of magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DelMag_found(void) {
      if constexpr (std::is_same<T, DelMag_t>::value)
         return true;
      else
         return false;
   };

   DelAbsMag_t& DelAbsMag(void) {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DelAbsMag (Gradient of magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelAbsMag_t& DelAbsMag(void) const {
   if constexpr (std::is_same<T, DelAbsMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DelAbsMag (Gradient of magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DelAbsMag_found(void) {
      if constexpr (std::is_same<T, DelAbsMag_t>::value)
         return true;
      else
         return false;
   };

   DelHatMag_t& DelHatMag(void) {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DelHatMag (Gradient of magnetic field direction ) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DelHatMag_t& DelHatMag(void) const {
   if constexpr (std::is_same<T, DelHatMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DelHatMag (Gradient of magnetic field direction ) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DelHatMag_found(void) {
      if constexpr (std::is_same<T, DelHatMag_t>::value)
         return true;
      else
         return false;
   };

   DdtVel_t& DdtVel(void) {
      if constexpr (std::is_same<T, DdtVel_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DdtVel (Time derivative of velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DdtVel_t& DdtVel(void) const {
   if constexpr (std::is_same<T, DdtVel_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DdtVel (Time derivative of velocity field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DdtVel_found(void) {
      if constexpr (std::is_same<T, DdtVel_t>::value)
         return true;
      else
         return false;
   };

   DdtElc_t& DdtElc(void) {
      if constexpr (std::is_same<T, DdtElc_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DdtElc (Time derivative of electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DdtElc_t& DdtElc(void) const {
   if constexpr (std::is_same<T, DdtElc_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DdtElc (Time derivative of electric field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DdtElc_found(void) {
      if constexpr (std::is_same<T, DdtElc_t>::value)
         return true;
      else
         return false;
   };

   DdtMag_t& DdtMag(void) {
      if constexpr (std::is_same<T, DdtMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DdtMag (Time derivative of magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DdtMag_t& DdtMag(void) const {
   if constexpr (std::is_same<T, DdtMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DdtMag (Time derivative of magnetic field) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DdtMag_found(void) {
      if constexpr (std::is_same<T, DdtMag_t>::value)
         return true;
      else
         return false;
   };

   DdtAbsMag_t& DdtAbsMag(void) {
      if constexpr (std::is_same<T, DdtAbsMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DdtAbsMag (Time derivative of magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DdtAbsMag_t& DdtAbsMag(void) const {
   if constexpr (std::is_same<T, DdtAbsMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DdtAbsMag (Time derivative of magnetic field magnitude) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DdtAbsMag_found(void) {
      if constexpr (std::is_same<T, DdtAbsMag_t>::value)
         return true;
      else
         return false;
   };

   DdtHatMag_t& DdtHatMag(void) {
      if constexpr (std::is_same<T, DdtHatMag_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] DdtHatMag (Time derivative of magnetic field direction) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const DdtHatMag_t& DdtHatMag(void) const {
   if constexpr (std::is_same<T, DdtHatMag_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] DdtHatMag (Time derivative of magnetic field direction) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool DdtHatMag_found(void) {
      if constexpr (std::is_same<T, DdtHatMag_t>::value)
         return true;
      else
         return false;
   };

   Iv0_t& Iv0(void) {
      if constexpr (std::is_same<T, Iv0_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Iv0 (Zeroth (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Iv0_t& Iv0(void) const {
   if constexpr (std::is_same<T, Iv0_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Iv0 (Zeroth (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Iv0_found(void) {
      if constexpr (std::is_same<T, Iv0_t>::value)
         return true;
      else
         return false;
   };

   Iv1_t& Iv1(void) {
      if constexpr (std::is_same<T, Iv1_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Iv1 (First (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Iv1_t& Iv1(void) const {
   if constexpr (std::is_same<T, Iv1_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Iv1 (First (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Iv1_found(void) {
      if constexpr (std::is_same<T, Iv1_t>::value)
         return true;
      else
         return false;
   };

   Iv2_t& Iv2(void) {
      if constexpr (std::is_same<T, Iv2_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Iv2 (Second (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Iv2_t& Iv2(void) const {
   if constexpr (std::is_same<T, Iv2_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Iv2 (Second (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Iv2_found(void) {
      if constexpr (std::is_same<T, Iv2_t>::value)
         return true;
      else
         return false;
   };

   Iv3_t& Iv3(void) {
      if constexpr (std::is_same<T, Iv3_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Iv3 (Third (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Iv3_t& Iv3(void) const {
   if constexpr (std::is_same<T, Iv3_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Iv3 (Third (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Iv3_found(void) {
      if constexpr (std::is_same<T, Iv3_t>::value)
         return true;
      else
         return false;
   };

   Iv4_t& Iv4(void) {
      if constexpr (std::is_same<T, Iv4_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Iv4 (Fourth (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Iv4_t& Iv4(void) const {
   if constexpr (std::is_same<T, Iv4_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Iv4 (Fourth (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Iv4_found(void) {
      if constexpr (std::is_same<T, Iv4_t>::value)
         return true;
      else
         return false;
   };

   Iv5_t& Iv5(void) {
      if constexpr (std::is_same<T, Iv5_t>::value)
         return data;
      else
        throw std::invalid_argument( "[Species] Iv5 (Fifth (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
  const Iv5_t& Iv5(void) const {
   if constexpr (std::is_same<T, Iv5_t>::value)
      return data;
   else
      throw std::invalid_argument( "[Species] Iv5 (Fifth (general purpose) Indicator variable) was not found: the tuple does not contain the requested value type. You can add this value type when you build the tuple type." );
   };
   
   static constexpr bool Iv5_found(void) {
      if constexpr (std::is_same<T, Iv5_t>::value)
         return true;
      else
         return false;
   };

   // END(fields/generate, base)

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Divergence of U
*/
   inline double divU(void)
   {
      return DelVel().Trace();
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Divergence of B
*/
   inline double divB(void)
   {
      return DelMag().Trace();
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Divergence of E
*/
   inline double divE(void)
   {
      return DelElc().Trace();
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Curl of U
*/
   inline GeoVector curlU(void)
   {
      GeoVector vec_tmp;
      GeoMatrix G = DelVel();
      vec_tmp[0] = G[1][2] - G[2][1];
      vec_tmp[1] = G[2][0] - G[0][2];
      vec_tmp[2] = G[0][1] - G[1][0];
      return vec_tmp;
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Curl of B
*/
   inline GeoVector curlB(void)
   {
      GeoVector vec_tmp;
      GeoMatrix G = DelMag();
      vec_tmp[0] = G[1][2] - G[2][1];
      vec_tmp[1] = G[2][0] - G[0][2];
      vec_tmp[2] = G[0][1] - G[1][0];
      return vec_tmp;
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Curl of E
*/
   inline GeoVector curlE(void)
   {
      GeoVector vec_tmp;
      GeoMatrix G = DelElc();
      vec_tmp[0] = G[1][2] - G[2][1];
      vec_tmp[1] = G[2][0] - G[0][2];
      vec_tmp[2] = G[0][1] - G[1][0];
      return vec_tmp;
   };



/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Divergence of bhat
\note The formula comes from applying vector identity (7) in the NRL Plasma formulary
*/
   double divbhat()
   {
      auto bhat = DdtMag();
      auto Bmag = AbsMag();
      auto gradBmag = DelAbsMag();
      auto Bdiv = divB();
      double x1 = gradBmag * bhat;
      auto x2 = Bdiv - x1;
      auto x3 = x2/Bmag;
      return x3;
   };

/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Curl of bhat
\note The formula comes from applying vector identity (8) in the NRL Plasma formulary
*/
   GeoVector curlbhat()
   {
      auto bhat = HatMag();
      // todo fix when using auto or MmagT to set type
      double Bmag = AbsMag();
      auto gradBmag = DelAbsMag();
      return (curlB() - (gradBmag ^ bhat)) / Bmag;
   };

/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Gradient of bhat
\note The formula comes from expanding \partial_i bhat_j = d/dx^i (B_j / B)
*/
   GeoMatrix gradbhat()
   {
      auto bhat = HatMag();
      double Bmag = AbsMag();
      auto gradB = DelMag();
      auto gradBmag = DelAbsMag();
      // todo Dyadic can be made static
      GeoMatrix tmp;
      tmp.Dyadic(gradBmag, bhat);
      return (gradB - tmp) / Bmag;
   };

/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Time derivative of bhat
*/
   GeoVector dbhatdt()
   {
      auto dBvecdt = DdtMag();
      auto dBmagdt = DdtAbsMag();
      auto bhat = HatMag();
      double Bmag = AbsMag();
      return (dBvecdt - (dBmagdt * bhat)) / Bmag;
   };




   std::string str(bool recursive = false) const {
      if (recursive)
         return data.str();
      else
         return std::string(Field::Names[nameid]) + "{" + data.str() + "}";
   }

};

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] tup const Species type
\return The `I`th member of tuple, for template argument integer `I`
 \note The calling pattern is the same as that of std::get.
\note The value of template argument `I` must be known at compile time,
which can constraint usage in some situations. In these cases you may be
able use class method foreach() with one of the argument signatures.
*/
template <std::size_t I, Field::Id nameid, typename T, typename... Ts>
decltype(auto) get(const Species<nameid, T, Ts...>& tup) {
   if constexpr (I == 0)
      return tup.top();
   else
      return get<I-1>(static_cast<const Species<nameid, Ts...>&>(tup));
}

/*!
\author Lucius Schoenbaum
\date 06/02/2025
\param[in] tup Species type
\return The `I`th member of tuple, for template argument integer `I`
\note The calling pattern is the same as that of std::get.
\note The value of template argument `I` must be known at compile time,
which can constraint usage in some situations. In these cases you may be
able use class method foreach() with one of the argument signatures.
*/
template <std::size_t I, Field::Id nameid, typename T, typename... Ts>
decltype(auto) get(Species<nameid, T, Ts...>& tup) {
   if constexpr (I == 0)
      return tup.top();
   else
      return get<I-1>(static_cast<Species<nameid, Ts...>&>(tup));
}

};

#endif
