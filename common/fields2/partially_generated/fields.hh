/*!
\file fields.hh
\author Vladimir Florinski
\author Lucius Schoenbaum
\author Juan G Alonso Guzman

This file is part of the SPECTRUM suite of scientific numerical simulation codes. SPECTRUM stands for Space Plasma and Energetic Charged particle TRansport on Unstructured Meshes. The code simulates plasma or neutral particle flows using MHD equations on a grid, transport of cosmic rays using stochastic or grid based methods. The "unstructured" part refers to the use of a geodesic mesh providing a uniform coverage of the surface of a sphere.
*/

/*
This file contains a block of code generated by generate.py.
Do not edit the contents of this file within the block bounded by
the pragmas "BEGIN(fields/generate)" and "END(fields/generate)",
instead edit the file `generated/generate.py`.
Elsewhere, this file can be edited normally.
*/

#ifndef SPECTRUM_FIELDS_HH
#define SPECTRUM_FIELDS_HH

#include <iostream>
#include <any>
#include <stdexcept>
#include "../generated/species_types.hh"

namespace Spectrum {

/*!
\brief Multi-purpose class storing physical data defined at a spatial location.
Can be used for data interface in the (pseudo-)particle tracer,
or to house per-cell data on a grid.
\author Lucius Schoenbaum
\author Vladimir Florinski
\author Juan G Alonzo Guzman
\date 08/26/2025
*/
template <typename ... Ts>
struct Fields {
public:

/*!
\brief Check anonymously for presence of a type in the tuple
\author Lucius Schoenbaum
\date 08/26/2025
 */
   template <typename X>
   static constexpr bool found() {
      return (std::same_as<X, Ts> || ...);
   }

//private:
public: // test

   static constexpr const std::size_t Type_not_found = 1e16;

/*!
\brief The size measured in number of independent scalars (the most natural unit for applications).
\author Lucius Schoenbaum
\date 08/26/2025
 */
   static constexpr std::size_t compute_size() {
      return (sizeof(Ts) + ...)/sizeof(double);
   }

   template <typename X>
   static constexpr std::size_t compute_index() {
      constexpr bool locate[] = {std::same_as<X, Ts>...};
      for (std::size_t i = 0; i < sizeof...(Ts); ++i) {
         if (locate[i]) return i;
      }
      return Type_not_found;
   }

   template<std::size_t... Is>
   static constexpr std::size_t compute_offset_impl(std::index_sequence<Is...>) {
      return (sizeof(std::tuple_element_t<Is, std::tuple<Ts...>>) + ...)/sizeof(double);
   }

   template<typename X>
   static constexpr std::size_t compute_offset() {
      constexpr auto i = compute_index<X>();
      if constexpr (i == 0 || i == Type_not_found) return i;
      else return compute_offset_impl(std::make_index_sequence<i>{});
   }

   static constexpr const std::size_t size_ = compute_size();

   // BEGIN(fields/generate, base)

   static constexpr const std::size_t Pos_offset = compute_offset<Pos_t>();
   static constexpr const std::size_t Time_offset = compute_offset<Time_t>();
   static constexpr const std::size_t Den_offset = compute_offset<Den_t>();
   static constexpr const std::size_t Prs_offset = compute_offset<Prs_t>();
   static constexpr const std::size_t Enr_offset = compute_offset<Enr_t>();
   static constexpr const std::size_t Vel_offset = compute_offset<Vel_t>();
   static constexpr const std::size_t Mom_offset = compute_offset<Mom_t>();
   static constexpr const std::size_t FlxDen_offset = compute_offset<FlxDen_t>();
   static constexpr const std::size_t FlxMom_offset = compute_offset<FlxMom_t>();
   static constexpr const std::size_t FlxEnr_offset = compute_offset<FlxEnr_t>();
   static constexpr const std::size_t Mag_offset = compute_offset<Mag_t>();
   static constexpr const std::size_t FlxMag_offset = compute_offset<FlxMag_t>();
   static constexpr const std::size_t Glm_offset = compute_offset<Glm_t>();
   static constexpr const std::size_t FlxGlm_offset = compute_offset<FlxGlm_t>();
   static constexpr const std::size_t Elc_offset = compute_offset<Elc_t>();
   static constexpr const std::size_t AbsMag_offset = compute_offset<AbsMag_t>();
   static constexpr const std::size_t HatMag_offset = compute_offset<HatMag_t>();
   static constexpr const std::size_t DelVel_offset = compute_offset<DelVel_t>();
   static constexpr const std::size_t DelElc_offset = compute_offset<DelElc_t>();
   static constexpr const std::size_t DelMag_offset = compute_offset<DelMag_t>();
   static constexpr const std::size_t DelAbsMag_offset = compute_offset<DelAbsMag_t>();
   static constexpr const std::size_t DelHatMag_offset = compute_offset<DelHatMag_t>();
   static constexpr const std::size_t DdtVel_offset = compute_offset<DdtVel_t>();
   static constexpr const std::size_t DdtElc_offset = compute_offset<DdtElc_t>();
   static constexpr const std::size_t DdtMag_offset = compute_offset<DdtMag_t>();
   static constexpr const std::size_t DdtAbsMag_offset = compute_offset<DdtAbsMag_t>();
   static constexpr const std::size_t DdtHatMag_offset = compute_offset<DdtHatMag_t>();
   static constexpr const std::size_t Iv0_offset = compute_offset<Iv0_t>();
   static constexpr const std::size_t Iv1_offset = compute_offset<Iv1_t>();
   static constexpr const std::size_t Iv2_offset = compute_offset<Iv2_t>();
   static constexpr const std::size_t Iv3_offset = compute_offset<Iv3_t>();
   static constexpr const std::size_t Iv4_offset = compute_offset<Iv4_t>();
   static constexpr const std::size_t Iv5_offset = compute_offset<Iv5_t>();
   static constexpr const std::size_t IvLISM_offset = compute_offset<IvLISM_t>();
   static constexpr const std::size_t IvBmix_offset = compute_offset<IvBmix_t>();
   static constexpr const std::size_t IvSolarCycle_offset = compute_offset<IvSolarCycle_t>();
   static constexpr const std::size_t PrimitiveGasDyn_offset = compute_offset<PrimitiveGasDyn_t>();
   static constexpr const std::size_t ConservedGasDyn_offset = compute_offset<ConservedGasDyn_t>();
   static constexpr const std::size_t PrimitiveMHD_offset = compute_offset<PrimitiveMHD_t>();
   static constexpr const std::size_t ConservedMHD_offset = compute_offset<ConservedMHD_t>();
   static constexpr const std::size_t PrimitiveMHDGLM_offset = compute_offset<PrimitiveMHDGLM_t>();
   static constexpr const std::size_t ConservedMHDGLM_offset = compute_offset<ConservedMHDGLM_t>();
   static constexpr const std::size_t ElectronCore_offset = compute_offset<ElectronCore_t>();
   static constexpr const std::size_t ElectronHalo_offset = compute_offset<ElectronHalo_t>();
   static constexpr const std::size_t ElectronBeam_offset = compute_offset<ElectronBeam_t>();
   static constexpr const std::size_t ProtonCore_offset = compute_offset<ProtonCore_t>();
   static constexpr const std::size_t ProtonHalo_offset = compute_offset<ProtonHalo_t>();
   static constexpr const std::size_t ProtonBeam_offset = compute_offset<ProtonBeam_t>();
   static constexpr const std::size_t ProtonPickup_offset = compute_offset<ProtonPickup_t>();
   static constexpr const std::size_t AlphaCore_offset = compute_offset<AlphaCore_t>();
   static constexpr const std::size_t AlphaHalo_offset = compute_offset<AlphaHalo_t>();
   static constexpr const std::size_t HeliumSingleCore_offset = compute_offset<HeliumSingleCore_t>();
   static constexpr const std::size_t HeliumSinglePickup_offset = compute_offset<HeliumSinglePickup_t>();
   static constexpr const std::size_t HydrogenPlasmaCore_offset = compute_offset<HydrogenPlasmaCore_t>();
   static constexpr const std::size_t HydrogenCore_offset = compute_offset<HydrogenCore_t>();
   static constexpr const std::size_t HydrogenHalo_offset = compute_offset<HydrogenHalo_t>();
   static constexpr const std::size_t HydrogenBeam_offset = compute_offset<HydrogenBeam_t>();
   static constexpr const std::size_t HeliumCore_offset = compute_offset<HeliumCore_t>();

   // END(fields/generate, base)

protected:

   double data[size_];

public:

   Fields(void) = default;

   explicit Fields(Ts... in):
       data(in...)
   {};


/*!
\author Lucius Schoenbaum
\author Vladimir Florinski
\date 07/02/2024
\param[in] other Structure to copy from
\return Reference to the object
*/
   Fields& operator=(const Fields& other) {
      std::memcpy(data, other.data, size_*sizeof(double));
      return *this;
   };
  
/*!
\author Lucius Schoenbaum
\date 05/28/2025
\return size of data structure, measured in number of independent numerical values.
*/
   static size_t size() {
      return size_;
   }

/*!
\author Lucius Schoenbaum
\date 08/26/2025
\return size of data structure, measured in tuple elements.
*/
   static size_t structured_size() {
      return sizeof...(Ts);
   }

/*!
\author Lucius Schoenbaum
\date 08/26/2025
\return the data structure as a random-access memory block (array).
As an array of double, the size is given by the static member size().
*/
   double* Array() {
      return data;
   }

   // BEGIN(fields/generate, class)

/*!
\brief Get Pos (Position in space) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& Pos(void) {
      return reinterpret_cast<GeoVector&>(*(data + Pos_offset));
   };

/*!
\brief Get Pos (Position in space) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& Pos(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + Pos_offset));
   };


/*!
\brief Whether Pos (Position in space) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Pos_found(void) {
      return (Pos_offset != Type_not_found);
   };
   

/*!
\brief Get Time (Time) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Time(void) {
      return reinterpret_cast<double&>(*(data + Time_offset));
   };

/*!
\brief Get Time (Time) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Time(void) const {
      return reinterpret_cast<const double&>(*(data + Time_offset));
   };


/*!
\brief Whether Time (Time) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Time_found(void) {
      return (Time_offset != Type_not_found);
   };
   

/*!
\brief Get Den (Density field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Den(void) {
      return reinterpret_cast<double&>(*(data + Den_offset));
   };

/*!
\brief Get Den (Density field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Den(void) const {
      return reinterpret_cast<const double&>(*(data + Den_offset));
   };


/*!
\brief Whether Den (Density field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Den_found(void) {
      return (Den_offset != Type_not_found);
   };
   

/*!
\brief Get Prs (Pressure field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Prs(void) {
      return reinterpret_cast<double&>(*(data + Prs_offset));
   };

/*!
\brief Get Prs (Pressure field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Prs(void) const {
      return reinterpret_cast<const double&>(*(data + Prs_offset));
   };


/*!
\brief Whether Prs (Pressure field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Prs_found(void) {
      return (Prs_offset != Type_not_found);
   };
   

/*!
\brief Get Enr (Energy field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Enr(void) {
      return reinterpret_cast<double&>(*(data + Enr_offset));
   };

/*!
\brief Get Enr (Energy field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Enr(void) const {
      return reinterpret_cast<const double&>(*(data + Enr_offset));
   };


/*!
\brief Whether Enr (Energy field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Enr_found(void) {
      return (Enr_offset != Type_not_found);
   };
   

/*!
\brief Get Vel (Velocity field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& Vel(void) {
      return reinterpret_cast<GeoVector&>(*(data + Vel_offset));
   };

/*!
\brief Get Vel (Velocity field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& Vel(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + Vel_offset));
   };


/*!
\brief Whether Vel (Velocity field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Vel_found(void) {
      return (Vel_offset != Type_not_found);
   };
   

/*!
\brief Get Mom (Momentum field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& Mom(void) {
      return reinterpret_cast<GeoVector&>(*(data + Mom_offset));
   };

/*!
\brief Get Mom (Momentum field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& Mom(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + Mom_offset));
   };


/*!
\brief Whether Mom (Momentum field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Mom_found(void) {
      return (Mom_offset != Type_not_found);
   };
   

/*!
\brief Get FlxDen (Fluid density flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& FlxDen(void) {
      return reinterpret_cast<double&>(*(data + FlxDen_offset));
   };

/*!
\brief Get FlxDen (Fluid density flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& FlxDen(void) const {
      return reinterpret_cast<const double&>(*(data + FlxDen_offset));
   };


/*!
\brief Whether FlxDen (Fluid density flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxDen_found(void) {
      return (FlxDen_offset != Type_not_found);
   };
   

/*!
\brief Get FlxMom (Fluid momentum flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& FlxMom(void) {
      return reinterpret_cast<GeoVector&>(*(data + FlxMom_offset));
   };

/*!
\brief Get FlxMom (Fluid momentum flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& FlxMom(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + FlxMom_offset));
   };


/*!
\brief Whether FlxMom (Fluid momentum flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxMom_found(void) {
      return (FlxMom_offset != Type_not_found);
   };
   

/*!
\brief Get FlxEnr (Fluid energy flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& FlxEnr(void) {
      return reinterpret_cast<double&>(*(data + FlxEnr_offset));
   };

/*!
\brief Get FlxEnr (Fluid energy flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& FlxEnr(void) const {
      return reinterpret_cast<const double&>(*(data + FlxEnr_offset));
   };


/*!
\brief Whether FlxEnr (Fluid energy flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxEnr_found(void) {
      return (FlxEnr_offset != Type_not_found);
   };
   

/*!
\brief Get Mag (Magnetic field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& Mag(void) {
      return reinterpret_cast<GeoVector&>(*(data + Mag_offset));
   };

/*!
\brief Get Mag (Magnetic field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& Mag(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + Mag_offset));
   };


/*!
\brief Whether Mag (Magnetic field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Mag_found(void) {
      return (Mag_offset != Type_not_found);
   };
   

/*!
\brief Get FlxMag (Magnetic field flux function) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& FlxMag(void) {
      return reinterpret_cast<GeoVector&>(*(data + FlxMag_offset));
   };

/*!
\brief Get FlxMag (Magnetic field flux function) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& FlxMag(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + FlxMag_offset));
   };


/*!
\brief Whether FlxMag (Magnetic field flux function) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxMag_found(void) {
      return (FlxMag_offset != Type_not_found);
   };
   

/*!
\brief Get Glm (Lagrange multiplier field of GLM MHD) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Glm(void) {
      return reinterpret_cast<double&>(*(data + Glm_offset));
   };

/*!
\brief Get Glm (Lagrange multiplier field of GLM MHD) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Glm(void) const {
      return reinterpret_cast<const double&>(*(data + Glm_offset));
   };


/*!
\brief Whether Glm (Lagrange multiplier field of GLM MHD) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Glm_found(void) {
      return (Glm_offset != Type_not_found);
   };
   

/*!
\brief Get FlxGlm (Lagrange mutlipler flux function of GLM MHD) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& FlxGlm(void) {
      return reinterpret_cast<double&>(*(data + FlxGlm_offset));
   };

/*!
\brief Get FlxGlm (Lagrange mutlipler flux function of GLM MHD) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& FlxGlm(void) const {
      return reinterpret_cast<const double&>(*(data + FlxGlm_offset));
   };


/*!
\brief Whether FlxGlm (Lagrange mutlipler flux function of GLM MHD) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool FlxGlm_found(void) {
      return (FlxGlm_offset != Type_not_found);
   };
   

/*!
\brief Get Elc (Electric field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& Elc(void) {
      return reinterpret_cast<GeoVector&>(*(data + Elc_offset));
   };

/*!
\brief Get Elc (Electric field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& Elc(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + Elc_offset));
   };


/*!
\brief Whether Elc (Electric field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Elc_found(void) {
      return (Elc_offset != Type_not_found);
   };
   

/*!
\brief Get AbsMag (Magnetic field magnitude) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& AbsMag(void) {
      return reinterpret_cast<double&>(*(data + AbsMag_offset));
   };

/*!
\brief Get AbsMag (Magnetic field magnitude) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& AbsMag(void) const {
      return reinterpret_cast<const double&>(*(data + AbsMag_offset));
   };


/*!
\brief Whether AbsMag (Magnetic field magnitude) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool AbsMag_found(void) {
      return (AbsMag_offset != Type_not_found);
   };
   

/*!
\brief Get HatMag (Magnetic field direction) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& HatMag(void) {
      return reinterpret_cast<GeoVector&>(*(data + HatMag_offset));
   };

/*!
\brief Get HatMag (Magnetic field direction) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& HatMag(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + HatMag_offset));
   };


/*!
\brief Whether HatMag (Magnetic field direction) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool HatMag_found(void) {
      return (HatMag_offset != Type_not_found);
   };
   

/*!
\brief Get DelVel (Gradient of velocity field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoMatrix& DelVel(void) {
      return reinterpret_cast<GeoMatrix&>(*(data + DelVel_offset));
   };

/*!
\brief Get DelVel (Gradient of velocity field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoMatrix& DelVel(void) const {
      return reinterpret_cast<const GeoMatrix&>(*(data + DelVel_offset));
   };


/*!
\brief Whether DelVel (Gradient of velocity field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelVel_found(void) {
      return (DelVel_offset != Type_not_found);
   };
   

/*!
\brief Get DelElc (Gradient of electric field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoMatrix& DelElc(void) {
      return reinterpret_cast<GeoMatrix&>(*(data + DelElc_offset));
   };

/*!
\brief Get DelElc (Gradient of electric field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoMatrix& DelElc(void) const {
      return reinterpret_cast<const GeoMatrix&>(*(data + DelElc_offset));
   };


/*!
\brief Whether DelElc (Gradient of electric field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelElc_found(void) {
      return (DelElc_offset != Type_not_found);
   };
   

/*!
\brief Get DelMag (Gradient of magnetic field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoMatrix& DelMag(void) {
      return reinterpret_cast<GeoMatrix&>(*(data + DelMag_offset));
   };

/*!
\brief Get DelMag (Gradient of magnetic field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoMatrix& DelMag(void) const {
      return reinterpret_cast<const GeoMatrix&>(*(data + DelMag_offset));
   };


/*!
\brief Whether DelMag (Gradient of magnetic field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelMag_found(void) {
      return (DelMag_offset != Type_not_found);
   };
   

/*!
\brief Get DelAbsMag (Gradient of magnetic field magnitude) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& DelAbsMag(void) {
      return reinterpret_cast<GeoVector&>(*(data + DelAbsMag_offset));
   };

/*!
\brief Get DelAbsMag (Gradient of magnetic field magnitude) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& DelAbsMag(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + DelAbsMag_offset));
   };


/*!
\brief Whether DelAbsMag (Gradient of magnetic field magnitude) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelAbsMag_found(void) {
      return (DelAbsMag_offset != Type_not_found);
   };
   

/*!
\brief Get DelHatMag (Gradient of magnetic field direction ) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoMatrix& DelHatMag(void) {
      return reinterpret_cast<GeoMatrix&>(*(data + DelHatMag_offset));
   };

/*!
\brief Get DelHatMag (Gradient of magnetic field direction ) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoMatrix& DelHatMag(void) const {
      return reinterpret_cast<const GeoMatrix&>(*(data + DelHatMag_offset));
   };


/*!
\brief Whether DelHatMag (Gradient of magnetic field direction ) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DelHatMag_found(void) {
      return (DelHatMag_offset != Type_not_found);
   };
   

/*!
\brief Get DdtVel (Time derivative of velocity field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& DdtVel(void) {
      return reinterpret_cast<GeoVector&>(*(data + DdtVel_offset));
   };

/*!
\brief Get DdtVel (Time derivative of velocity field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& DdtVel(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + DdtVel_offset));
   };


/*!
\brief Whether DdtVel (Time derivative of velocity field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtVel_found(void) {
      return (DdtVel_offset != Type_not_found);
   };
   

/*!
\brief Get DdtElc (Time derivative of electric field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& DdtElc(void) {
      return reinterpret_cast<GeoVector&>(*(data + DdtElc_offset));
   };

/*!
\brief Get DdtElc (Time derivative of electric field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& DdtElc(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + DdtElc_offset));
   };


/*!
\brief Whether DdtElc (Time derivative of electric field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtElc_found(void) {
      return (DdtElc_offset != Type_not_found);
   };
   

/*!
\brief Get DdtMag (Time derivative of magnetic field) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& DdtMag(void) {
      return reinterpret_cast<GeoVector&>(*(data + DdtMag_offset));
   };

/*!
\brief Get DdtMag (Time derivative of magnetic field) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& DdtMag(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + DdtMag_offset));
   };


/*!
\brief Whether DdtMag (Time derivative of magnetic field) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtMag_found(void) {
      return (DdtMag_offset != Type_not_found);
   };
   

/*!
\brief Get DdtAbsMag (Time derivative of magnetic field magnitude) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& DdtAbsMag(void) {
      return reinterpret_cast<double&>(*(data + DdtAbsMag_offset));
   };

/*!
\brief Get DdtAbsMag (Time derivative of magnetic field magnitude) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& DdtAbsMag(void) const {
      return reinterpret_cast<const double&>(*(data + DdtAbsMag_offset));
   };


/*!
\brief Whether DdtAbsMag (Time derivative of magnetic field magnitude) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtAbsMag_found(void) {
      return (DdtAbsMag_offset != Type_not_found);
   };
   

/*!
\brief Get DdtHatMag (Time derivative of magnetic field direction) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   GeoVector& DdtHatMag(void) {
      return reinterpret_cast<GeoVector&>(*(data + DdtHatMag_offset));
   };

/*!
\brief Get DdtHatMag (Time derivative of magnetic field direction) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const GeoVector& DdtHatMag(void) const {
      return reinterpret_cast<const GeoVector&>(*(data + DdtHatMag_offset));
   };


/*!
\brief Whether DdtHatMag (Time derivative of magnetic field direction) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool DdtHatMag_found(void) {
      return (DdtHatMag_offset != Type_not_found);
   };
   

/*!
\brief Get Iv0 (Zeroth (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Iv0(void) {
      return reinterpret_cast<double&>(*(data + Iv0_offset));
   };

/*!
\brief Get Iv0 (Zeroth (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Iv0(void) const {
      return reinterpret_cast<const double&>(*(data + Iv0_offset));
   };


/*!
\brief Whether Iv0 (Zeroth (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv0_found(void) {
      return (Iv0_offset != Type_not_found);
   };
   

/*!
\brief Get Iv1 (First (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Iv1(void) {
      return reinterpret_cast<double&>(*(data + Iv1_offset));
   };

/*!
\brief Get Iv1 (First (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Iv1(void) const {
      return reinterpret_cast<const double&>(*(data + Iv1_offset));
   };


/*!
\brief Whether Iv1 (First (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv1_found(void) {
      return (Iv1_offset != Type_not_found);
   };
   

/*!
\brief Get Iv2 (Second (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Iv2(void) {
      return reinterpret_cast<double&>(*(data + Iv2_offset));
   };

/*!
\brief Get Iv2 (Second (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Iv2(void) const {
      return reinterpret_cast<const double&>(*(data + Iv2_offset));
   };


/*!
\brief Whether Iv2 (Second (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv2_found(void) {
      return (Iv2_offset != Type_not_found);
   };
   

/*!
\brief Get Iv3 (Third (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Iv3(void) {
      return reinterpret_cast<double&>(*(data + Iv3_offset));
   };

/*!
\brief Get Iv3 (Third (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Iv3(void) const {
      return reinterpret_cast<const double&>(*(data + Iv3_offset));
   };


/*!
\brief Whether Iv3 (Third (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv3_found(void) {
      return (Iv3_offset != Type_not_found);
   };
   

/*!
\brief Get Iv4 (Fourth (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Iv4(void) {
      return reinterpret_cast<double&>(*(data + Iv4_offset));
   };

/*!
\brief Get Iv4 (Fourth (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Iv4(void) const {
      return reinterpret_cast<const double&>(*(data + Iv4_offset));
   };


/*!
\brief Whether Iv4 (Fourth (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv4_found(void) {
      return (Iv4_offset != Type_not_found);
   };
   

/*!
\brief Get Iv5 (Fifth (general purpose) Indicator variable) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& Iv5(void) {
      return reinterpret_cast<double&>(*(data + Iv5_offset));
   };

/*!
\brief Get Iv5 (Fifth (general purpose) Indicator variable) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& Iv5(void) const {
      return reinterpret_cast<const double&>(*(data + Iv5_offset));
   };


/*!
\brief Whether Iv5 (Fifth (general purpose) Indicator variable) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool Iv5_found(void) {
      return (Iv5_offset != Type_not_found);
   };
   

/*!
\brief Get IvLISM (LISM Indicator variable for diffusion types (Strauss et al. 2013, Potgeiter et al. 2015)) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& IvLISM(void) {
      return reinterpret_cast<double&>(*(data + IvLISM_offset));
   };

/*!
\brief Get IvLISM (LISM Indicator variable for diffusion types (Strauss et al. 2013, Potgeiter et al. 2015)) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& IvLISM(void) const {
      return reinterpret_cast<const double&>(*(data + IvLISM_offset));
   };


/*!
\brief Whether IvLISM (LISM Indicator variable for diffusion types (Strauss et al. 2013, Potgeiter et al. 2015)) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool IvLISM_found(void) {
      return (IvLISM_offset != Type_not_found);
   };
   

/*!
\brief Get IvBmix (magnetic mixing indicator variable (see DiffusionEmpiricalSOQLTandUNLT)) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& IvBmix(void) {
      return reinterpret_cast<double&>(*(data + IvBmix_offset));
   };

/*!
\brief Get IvBmix (magnetic mixing indicator variable (see DiffusionEmpiricalSOQLTandUNLT)) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& IvBmix(void) const {
      return reinterpret_cast<const double&>(*(data + IvBmix_offset));
   };


/*!
\brief Whether IvBmix (magnetic mixing indicator variable (see DiffusionEmpiricalSOQLTandUNLT)) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool IvBmix_found(void) {
      return (IvBmix_offset != Type_not_found);
   };
   

/*!
\brief Get IvSolarCycle (solar cycle indicator variable (see DiffusionEmpiricalSOQLTandUNLT)) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   double& IvSolarCycle(void) {
      return reinterpret_cast<double&>(*(data + IvSolarCycle_offset));
   };

/*!
\brief Get IvSolarCycle (solar cycle indicator variable (see DiffusionEmpiricalSOQLTandUNLT)) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const double& IvSolarCycle(void) const {
      return reinterpret_cast<const double&>(*(data + IvSolarCycle_offset));
   };


/*!
\brief Whether IvSolarCycle (solar cycle indicator variable (see DiffusionEmpiricalSOQLTandUNLT)) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool IvSolarCycle_found(void) {
      return (IvSolarCycle_offset != Type_not_found);
   };
   

/*!
\brief Get PrimitiveGasDyn (Fields of the primitive form for general gas dynamics) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   PrimitiveGasDyn_t& PrimitiveGasDyn(void) {
      return reinterpret_cast<PrimitiveGasDyn_t&>(*(data + PrimitiveGasDyn_offset));
   };

/*!
\brief Get PrimitiveGasDyn (Fields of the primitive form for general gas dynamics) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const PrimitiveGasDyn_t& PrimitiveGasDyn(void) const {
      return reinterpret_cast<const PrimitiveGasDyn_t&>(*(data + PrimitiveGasDyn_offset));
   };


/*!
\brief Whether PrimitiveGasDyn (Fields of the primitive form for general gas dynamics) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool PrimitiveGasDyn_found(void) {
      return (PrimitiveGasDyn_offset != Type_not_found);
   };
   

/*!
\brief Get ConservedGasDyn (Fields of the conserved form for general gas dynamics) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ConservedGasDyn_t& ConservedGasDyn(void) {
      return reinterpret_cast<ConservedGasDyn_t&>(*(data + ConservedGasDyn_offset));
   };

/*!
\brief Get ConservedGasDyn (Fields of the conserved form for general gas dynamics) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ConservedGasDyn_t& ConservedGasDyn(void) const {
      return reinterpret_cast<const ConservedGasDyn_t&>(*(data + ConservedGasDyn_offset));
   };


/*!
\brief Whether ConservedGasDyn (Fields of the conserved form for general gas dynamics) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ConservedGasDyn_found(void) {
      return (ConservedGasDyn_offset != Type_not_found);
   };
   

/*!
\brief Get PrimitiveMHD (Fields of the conserved form for general MHD) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   PrimitiveMHD_t& PrimitiveMHD(void) {
      return reinterpret_cast<PrimitiveMHD_t&>(*(data + PrimitiveMHD_offset));
   };

/*!
\brief Get PrimitiveMHD (Fields of the conserved form for general MHD) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const PrimitiveMHD_t& PrimitiveMHD(void) const {
      return reinterpret_cast<const PrimitiveMHD_t&>(*(data + PrimitiveMHD_offset));
   };


/*!
\brief Whether PrimitiveMHD (Fields of the conserved form for general MHD) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool PrimitiveMHD_found(void) {
      return (PrimitiveMHD_offset != Type_not_found);
   };
   

/*!
\brief Get ConservedMHD (Fields of the conserved form for general MHD) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ConservedMHD_t& ConservedMHD(void) {
      return reinterpret_cast<ConservedMHD_t&>(*(data + ConservedMHD_offset));
   };

/*!
\brief Get ConservedMHD (Fields of the conserved form for general MHD) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ConservedMHD_t& ConservedMHD(void) const {
      return reinterpret_cast<const ConservedMHD_t&>(*(data + ConservedMHD_offset));
   };


/*!
\brief Whether ConservedMHD (Fields of the conserved form for general MHD) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ConservedMHD_found(void) {
      return (ConservedMHD_offset != Type_not_found);
   };
   

/*!
\brief Get PrimitiveMHDGLM (Fields of the conserved form for general MHD-GLM) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   PrimitiveMHDGLM_t& PrimitiveMHDGLM(void) {
      return reinterpret_cast<PrimitiveMHDGLM_t&>(*(data + PrimitiveMHDGLM_offset));
   };

/*!
\brief Get PrimitiveMHDGLM (Fields of the conserved form for general MHD-GLM) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const PrimitiveMHDGLM_t& PrimitiveMHDGLM(void) const {
      return reinterpret_cast<const PrimitiveMHDGLM_t&>(*(data + PrimitiveMHDGLM_offset));
   };


/*!
\brief Whether PrimitiveMHDGLM (Fields of the conserved form for general MHD-GLM) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool PrimitiveMHDGLM_found(void) {
      return (PrimitiveMHDGLM_offset != Type_not_found);
   };
   

/*!
\brief Get ConservedMHDGLM (Fields of the conserved form for general MHD-GLM) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ConservedMHDGLM_t& ConservedMHDGLM(void) {
      return reinterpret_cast<ConservedMHDGLM_t&>(*(data + ConservedMHDGLM_offset));
   };

/*!
\brief Get ConservedMHDGLM (Fields of the conserved form for general MHD-GLM) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ConservedMHDGLM_t& ConservedMHDGLM(void) const {
      return reinterpret_cast<const ConservedMHDGLM_t&>(*(data + ConservedMHDGLM_offset));
   };


/*!
\brief Whether ConservedMHDGLM (Fields of the conserved form for general MHD-GLM) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ConservedMHDGLM_found(void) {
      return (ConservedMHDGLM_offset != Type_not_found);
   };
   

/*!
\brief Get ElectronCore (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ElectronCore_t& ElectronCore(void) {
      return reinterpret_cast<ElectronCore_t&>(*(data + ElectronCore_offset));
   };

/*!
\brief Get ElectronCore (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ElectronCore_t& ElectronCore(void) const {
      return reinterpret_cast<const ElectronCore_t&>(*(data + ElectronCore_offset));
   };


/*!
\brief Whether ElectronCore (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ElectronCore_found(void) {
      return (ElectronCore_offset != Type_not_found);
   };
   

/*!
\brief Get ElectronHalo (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ElectronHalo_t& ElectronHalo(void) {
      return reinterpret_cast<ElectronHalo_t&>(*(data + ElectronHalo_offset));
   };

/*!
\brief Get ElectronHalo (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ElectronHalo_t& ElectronHalo(void) const {
      return reinterpret_cast<const ElectronHalo_t&>(*(data + ElectronHalo_offset));
   };


/*!
\brief Whether ElectronHalo (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ElectronHalo_found(void) {
      return (ElectronHalo_offset != Type_not_found);
   };
   

/*!
\brief Get ElectronBeam (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ElectronBeam_t& ElectronBeam(void) {
      return reinterpret_cast<ElectronBeam_t&>(*(data + ElectronBeam_offset));
   };

/*!
\brief Get ElectronBeam (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ElectronBeam_t& ElectronBeam(void) const {
      return reinterpret_cast<const ElectronBeam_t&>(*(data + ElectronBeam_offset));
   };


/*!
\brief Whether ElectronBeam (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ElectronBeam_found(void) {
      return (ElectronBeam_offset != Type_not_found);
   };
   

/*!
\brief Get ProtonCore (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ProtonCore_t& ProtonCore(void) {
      return reinterpret_cast<ProtonCore_t&>(*(data + ProtonCore_offset));
   };

/*!
\brief Get ProtonCore (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ProtonCore_t& ProtonCore(void) const {
      return reinterpret_cast<const ProtonCore_t&>(*(data + ProtonCore_offset));
   };


/*!
\brief Whether ProtonCore (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ProtonCore_found(void) {
      return (ProtonCore_offset != Type_not_found);
   };
   

/*!
\brief Get ProtonHalo (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ProtonHalo_t& ProtonHalo(void) {
      return reinterpret_cast<ProtonHalo_t&>(*(data + ProtonHalo_offset));
   };

/*!
\brief Get ProtonHalo (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ProtonHalo_t& ProtonHalo(void) const {
      return reinterpret_cast<const ProtonHalo_t&>(*(data + ProtonHalo_offset));
   };


/*!
\brief Whether ProtonHalo (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ProtonHalo_found(void) {
      return (ProtonHalo_offset != Type_not_found);
   };
   

/*!
\brief Get ProtonBeam (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ProtonBeam_t& ProtonBeam(void) {
      return reinterpret_cast<ProtonBeam_t&>(*(data + ProtonBeam_offset));
   };

/*!
\brief Get ProtonBeam (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ProtonBeam_t& ProtonBeam(void) const {
      return reinterpret_cast<const ProtonBeam_t&>(*(data + ProtonBeam_offset));
   };


/*!
\brief Whether ProtonBeam (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ProtonBeam_found(void) {
      return (ProtonBeam_offset != Type_not_found);
   };
   

/*!
\brief Get ProtonPickup (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   ProtonPickup_t& ProtonPickup(void) {
      return reinterpret_cast<ProtonPickup_t&>(*(data + ProtonPickup_offset));
   };

/*!
\brief Get ProtonPickup (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const ProtonPickup_t& ProtonPickup(void) const {
      return reinterpret_cast<const ProtonPickup_t&>(*(data + ProtonPickup_offset));
   };


/*!
\brief Whether ProtonPickup (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool ProtonPickup_found(void) {
      return (ProtonPickup_offset != Type_not_found);
   };
   

/*!
\brief Get AlphaCore (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   AlphaCore_t& AlphaCore(void) {
      return reinterpret_cast<AlphaCore_t&>(*(data + AlphaCore_offset));
   };

/*!
\brief Get AlphaCore (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const AlphaCore_t& AlphaCore(void) const {
      return reinterpret_cast<const AlphaCore_t&>(*(data + AlphaCore_offset));
   };


/*!
\brief Whether AlphaCore (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool AlphaCore_found(void) {
      return (AlphaCore_offset != Type_not_found);
   };
   

/*!
\brief Get AlphaHalo (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   AlphaHalo_t& AlphaHalo(void) {
      return reinterpret_cast<AlphaHalo_t&>(*(data + AlphaHalo_offset));
   };

/*!
\brief Get AlphaHalo (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const AlphaHalo_t& AlphaHalo(void) const {
      return reinterpret_cast<const AlphaHalo_t&>(*(data + AlphaHalo_offset));
   };


/*!
\brief Whether AlphaHalo (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool AlphaHalo_found(void) {
      return (AlphaHalo_offset != Type_not_found);
   };
   

/*!
\brief Get HeliumSingleCore (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   HeliumSingleCore_t& HeliumSingleCore(void) {
      return reinterpret_cast<HeliumSingleCore_t&>(*(data + HeliumSingleCore_offset));
   };

/*!
\brief Get HeliumSingleCore (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const HeliumSingleCore_t& HeliumSingleCore(void) const {
      return reinterpret_cast<const HeliumSingleCore_t&>(*(data + HeliumSingleCore_offset));
   };


/*!
\brief Whether HeliumSingleCore (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool HeliumSingleCore_found(void) {
      return (HeliumSingleCore_offset != Type_not_found);
   };
   

/*!
\brief Get HeliumSinglePickup (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   HeliumSinglePickup_t& HeliumSinglePickup(void) {
      return reinterpret_cast<HeliumSinglePickup_t&>(*(data + HeliumSinglePickup_offset));
   };

/*!
\brief Get HeliumSinglePickup (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const HeliumSinglePickup_t& HeliumSinglePickup(void) const {
      return reinterpret_cast<const HeliumSinglePickup_t&>(*(data + HeliumSinglePickup_offset));
   };


/*!
\brief Whether HeliumSinglePickup (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool HeliumSinglePickup_found(void) {
      return (HeliumSinglePickup_offset != Type_not_found);
   };
   

/*!
\brief Get HydrogenPlasmaCore (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   HydrogenPlasmaCore_t& HydrogenPlasmaCore(void) {
      return reinterpret_cast<HydrogenPlasmaCore_t&>(*(data + HydrogenPlasmaCore_offset));
   };

/*!
\brief Get HydrogenPlasmaCore (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const HydrogenPlasmaCore_t& HydrogenPlasmaCore(void) const {
      return reinterpret_cast<const HydrogenPlasmaCore_t&>(*(data + HydrogenPlasmaCore_offset));
   };


/*!
\brief Whether HydrogenPlasmaCore (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool HydrogenPlasmaCore_found(void) {
      return (HydrogenPlasmaCore_offset != Type_not_found);
   };
   

/*!
\brief Get HydrogenCore (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   HydrogenCore_t& HydrogenCore(void) {
      return reinterpret_cast<HydrogenCore_t&>(*(data + HydrogenCore_offset));
   };

/*!
\brief Get HydrogenCore (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const HydrogenCore_t& HydrogenCore(void) const {
      return reinterpret_cast<const HydrogenCore_t&>(*(data + HydrogenCore_offset));
   };


/*!
\brief Whether HydrogenCore (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool HydrogenCore_found(void) {
      return (HydrogenCore_offset != Type_not_found);
   };
   

/*!
\brief Get HydrogenHalo (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   HydrogenHalo_t& HydrogenHalo(void) {
      return reinterpret_cast<HydrogenHalo_t&>(*(data + HydrogenHalo_offset));
   };

/*!
\brief Get HydrogenHalo (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const HydrogenHalo_t& HydrogenHalo(void) const {
      return reinterpret_cast<const HydrogenHalo_t&>(*(data + HydrogenHalo_offset));
   };


/*!
\brief Whether HydrogenHalo (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool HydrogenHalo_found(void) {
      return (HydrogenHalo_offset != Type_not_found);
   };
   

/*!
\brief Get HydrogenBeam (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   HydrogenBeam_t& HydrogenBeam(void) {
      return reinterpret_cast<HydrogenBeam_t&>(*(data + HydrogenBeam_offset));
   };

/*!
\brief Get HydrogenBeam (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const HydrogenBeam_t& HydrogenBeam(void) const {
      return reinterpret_cast<const HydrogenBeam_t&>(*(data + HydrogenBeam_offset));
   };


/*!
\brief Whether HydrogenBeam (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool HydrogenBeam_found(void) {
      return (HydrogenBeam_offset != Type_not_found);
   };
   

/*!
\brief Get HeliumCore (Fields of the primitive form for species) from the data type, as lvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   HeliumCore_t& HeliumCore(void) {
      return reinterpret_cast<HeliumCore_t&>(*(data + HeliumCore_offset));
   };

/*!
\brief Get HeliumCore (Fields of the primitive form for species) from the data type, as const rvalue.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   const HeliumCore_t& HeliumCore(void) const {
      return reinterpret_cast<const HeliumCore_t&>(*(data + HeliumCore_offset));
   };


/*!
\brief Whether HeliumCore (Fields of the primitive form for species) is in the data type.
\author Lucius Schoenbaum
\date 3/25/2025
*/
   static constexpr bool HeliumCore_found(void) {
      return (HeliumCore_offset != Type_not_found);
   };
   


   // END(fields/generate, class)

   /*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Divergence of U
*/
   inline double divU(void)
   {
      return DelVel().Trace();
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Divergence of B
*/
   inline double divB(void)
   {
      return DelMag().Trace();
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Divergence of E
*/
   inline double divE(void)
   {
      return DelElc().Trace();
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Curl of U
*/
   inline GeoVector curlU(void)
   {
      GeoVector vec_tmp;
      GeoMatrix G = DelVel();
      vec_tmp[0] = G[1][2] - G[2][1];
      vec_tmp[1] = G[2][0] - G[0][2];
      vec_tmp[2] = G[0][1] - G[1][0];
      return vec_tmp;
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Curl of B
*/
   inline GeoVector curlB(void)
   {
      GeoVector vec_tmp;
      GeoMatrix G = DelMag();
      vec_tmp[0] = G[1][2] - G[2][1];
      vec_tmp[1] = G[2][0] - G[0][2];
      vec_tmp[2] = G[0][1] - G[1][0];
      return vec_tmp;
   };

/*!
\author Juan G Alonso Guzman
\date 10/18/2022
\return Curl of E
*/
   inline GeoVector curlE(void)
   {
      GeoVector vec_tmp;
      GeoMatrix G = DelElc();
      vec_tmp[0] = G[1][2] - G[2][1];
      vec_tmp[1] = G[2][0] - G[0][2];
      vec_tmp[2] = G[0][1] - G[1][0];
      return vec_tmp;
   };



/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Divergence of bhat
\note The formula comes from applying vector identity (7) in the NRL Plasma formulary
*/
   double divbhat()
   {
      auto bhat = DdtMag();
      auto Bmag = AbsMag();
      auto gradBmag = DelAbsMag();
      auto Bdiv = divB();
      double x1 = gradBmag * bhat;
      auto x2 = Bdiv - x1;
      auto x3 = x2/Bmag;
      return x3;
   };

/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Curl of bhat
\note The formula comes from applying vector identity (8) in the NRL Plasma formulary
*/
   GeoVector curlbhat()
   {
      auto bhat = HatMag();
      double Bmag = AbsMag();
      auto gradBmag = DelAbsMag();
      return (curlB() - (gradBmag ^ bhat)) / Bmag;
   };

/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Gradient of bhat
\note The formula comes from expanding \partial_i bhat_j = d/dx^i (B_j / B)
*/
   GeoMatrix gradbhat()
   {
      auto bhat = HatMag();
      double Bmag = AbsMag();
      auto gradB = DelMag();
      auto gradBmag = DelAbsMag();
      // todo Dyadic can be made static
      GeoMatrix tmp;
      tmp.Dyadic(gradBmag, bhat);
      return (gradB - tmp) / Bmag;
   };

/*!
\author Juan G Alonso Guzman
\date 07/02/2024
\return Time derivative of bhat
*/
   GeoVector dbhatdt()
   {
      auto dBvecdt = DdtMag();
      auto dBmagdt = DdtAbsMag();
      auto bhat = HatMag();
      double Bmag = AbsMag();
      return (dBvecdt - (dBmagdt * bhat)) / Bmag;
   };


   /*!
\author Lucius Schoenbaum
\date 05/28/2025
\return string representation of state, for testing purposes
*/
   std::string str(bool recursive = false) const {
      std::string out = "{";
      // todo - foreach
      out += "}";
      return out;
   }

};


};

#endif
